
Home_Traning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000134c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003cc  00800060  0000134c  000013e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  0080042c  0080042c  000017ac  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004efb  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001622  00000000  00000000  00006c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cf5  00000000  00000000  00008255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  0000af4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015c5  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c6a  00000000  00000000  0000d089  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  00010cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
u8 Entered_data[20]= "kha" ;
u8 Password_Leng=3;
/*LasT user in EEprom */


int main (void){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	61 97       	sbiw	r28, 0x11	; 17
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
        
	    u8 returned_value =1 ;
	    /*user passwords */
		
		
	    u8 User_One_Ps[3]="123";
      a6:	c0 90 85 00 	lds	r12, 0x0085	; 0x800085 <Kaypad_symbols+0x10>
      aa:	b0 90 86 00 	lds	r11, 0x0086	; 0x800086 <Kaypad_symbols+0x11>
      ae:	a0 90 87 00 	lds	r10, 0x0087	; 0x800087 <Kaypad_symbols+0x12>
	    u8 User_2_Ps[3]="456";
      b2:	90 90 89 00 	lds	r9, 0x0089	; 0x800089 <Kaypad_symbols+0x14>
      b6:	80 90 8a 00 	lds	r8, 0x008A	; 0x80008a <Kaypad_symbols+0x15>
      ba:	70 90 8b 00 	lds	r7, 0x008B	; 0x80008b <Kaypad_symbols+0x16>
	    u8 User_3_Ps[3]="789";
      be:	60 90 8d 00 	lds	r6, 0x008D	; 0x80008d <Kaypad_symbols+0x18>
      c2:	20 90 8e 00 	lds	r2, 0x008E	; 0x80008e <Kaypad_symbols+0x19>
      c6:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <Kaypad_symbols+0x1a>
      ca:	29 8b       	std	Y+17, r18	; 0x11
	    u8 Keypad_LED_on[3]="*";
      cc:	30 90 91 00 	lds	r3, 0x0091	; 0x800091 <Kaypad_symbols+0x1c>
	    u8 Keypad_cond_On[3]="+";
      d0:	40 90 94 00 	lds	r4, 0x0094	; 0x800094 <Kaypad_symbols+0x1f>
	    u8 Keypad_cond_OFF[3]="-";
      d4:	50 90 97 00 	lds	r5, 0x0097	; 0x800097 <Kaypad_symbols+0x22>
	
	H_BuzzerInit();
      d8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <H_BuzzerInit>
	SERVO_INIT();
      dc:	0e 94 c2 04 	call	0x984	; 0x984 <SERVO_INIT>
	 SERVO_MOVE(7);
      e0:	87 e0       	ldi	r24, 0x07	; 7
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 cb 04 	call	0x996	; 0x996 <SERVO_MOVE>
	TEMP_S_INIT();
      e8:	0e 94 ce 04 	call	0x99c	; 0x99c <TEMP_S_INIT>
	M_UsarIntInit();
      ec:	0e 94 1c 07 	call	0xe38	; 0xe38 <M_UsarIntInit>
	H_EppromInit();
      f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <H_EppromInit>
	DC_INIT();
      f4:	0e 94 df 02 	call	0x5be	; 0x5be <DC_INIT>
	H_LcdInit();
      f8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <H_LcdInit>
	KeypadInit();
      fc:	0e 94 22 03 	call	0x644	; 0x644 <KeypadInit>
    M_UsartSendString("Welcome To Admin Mode\r\nEnter Password\r\n\r\n");
     100:	8a e9       	ldi	r24, 0x9A	; 154
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("you can OPen the Door Enter D =\r\n\r\n");
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("you can Close the Door Enter N =\r\n\r\n");
     110:	88 ee       	ldi	r24, 0xE8	; 232
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("you can OPen the air conditioner Enter A=\r\n\r\n");
     118:	8d e0       	ldi	r24, 0x0D	; 13
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("you can Run 6 leds Enter 1 To 6 A=\r\n\r\n");
     120:	8b e3       	ldi	r24, 0x3B	; 59
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("You can also follow the system and see what users are doing\r\n\r\n");
     128:	82 e6       	ldi	r24, 0x62	; 98
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
	M_UsartSendString("You can also find out Last one from the register Enter L=\r\n\r\n");
     130:	82 ea       	ldi	r24, 0xA2	; 162
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
    M_UsartSendString("Then Don't Forget Enter '='\r\n\r\n");
     138:	80 ee       	ldi	r24, 0xE0	; 224
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
    H_LcdFirstLine();//mohim ykono bra
     140:	0e 94 b6 04 	call	0x96c	; 0x96c <H_LcdFirstLine>
	H_Lcd_Write_String("User Mode");
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	3f ef       	ldi	r19, 0xFF	; 255
     14e:	87 ea       	ldi	r24, 0xA7	; 167
     150:	91 e6       	ldi	r25, 0x61	; 97
     152:	31 50       	subi	r19, 0x01	; 1
     154:	80 40       	sbci	r24, 0x00	; 0
     156:	90 40       	sbci	r25, 0x00	; 0
     158:	e1 f7       	brne	.-8      	; 0x152 <main+0xc0>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xca>
     15c:	00 00       	nop
	
	_delay_ms(2000);
	H_Lcd_Clear();
     15e:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
    H_Lcd_Write_String("Enter The PS ");
     162:	8a e0       	ldi	r24, 0x0A	; 10
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
    H_LcdSecondLine();
     16a:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
		u8 *ptr=arr ;
		u8 array_len=0;
		u8 flag =0 ;
		u8 Admin_check=0;
        
	    u8 returned_value =1 ;
     16e:	ff 24       	eor	r15, r15
     170:	f3 94       	inc	r15
		u8 count =0 ;// iteration of error password
		u8 Key_Pad_reading=0 ;
		u8 i=0 ; //columns
		u8 arr[16];
		u8 *ptr=arr ;
		u8 array_len=0;
     172:	e1 2c       	mov	r14, r1
		u8 Password_flag=0;
		
		
		u8 count =0 ;// iteration of error password
		u8 Key_Pad_reading=0 ;
		u8 i=0 ; //columns
     174:	00 e0       	ldi	r16, 0x00	; 0
		u8 User_Selection=0;
		u8 Password_Length=5;
		u8 Password_flag=0;
		
		
		u8 count =0 ;// iteration of error password
     176:	d1 2c       	mov	r13, r1
     178:	02 c0       	rjmp	.+4      	; 0x17e <main+0xec>
		 
		 if (flag==1){ // all of this if the user enter = this mean he completed his password 
			 /*this is flag fired when the user enter = this mean that he ended enter the data*/
			 
			 i=0 ;
			 array_len=0 ;
     17a:	e1 2c       	mov	r14, r1
		 }
		 
		 if (flag==1){ // all of this if the user enter = this mean he completed his password 
			 /*this is flag fired when the user enter = this mean that he ended enter the data*/
			 
			 i=0 ;
     17c:	00 e0       	ldi	r16, 0x00	; 0
    H_Lcd_Write_String("Enter The PS ");
    H_LcdSecondLine();
    
	while(1){
		
		 Key_Pad_reading=KeypadRead();
     17e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <KeypadRead>
     182:	18 2f       	mov	r17, r24
		 
		 /*this loop to copy the number in array and print it in lcd */
		 while (i!=16 && Key_Pad_reading!='a') //كود كتابه كلمه واكمل عليها من غير ماامسح
     184:	00 31       	cpi	r16, 0x10	; 16
     186:	19 f5       	brne	.+70     	; 0x1ce <main+0x13c>
     188:	32 c1       	rjmp	.+612    	; 0x3ee <main+0x35c>
		 {
			 if (Key_Pad_reading=='C' || Key_Pad_reading=='=')
     18a:	13 34       	cpi	r17, 0x43	; 67
     18c:	19 f0       	breq	.+6      	; 0x194 <main+0x102>
     18e:	1d 33       	cpi	r17, 0x3D	; 61
     190:	59 f4       	brne	.+22     	; 0x1a8 <main+0x116>
     192:	20 c0       	rjmp	.+64     	; 0x1d4 <main+0x142>
			 {
				 if(Key_Pad_reading=='C'){
					 
					 array_len=0;// storing from index 0 again
					 H_Lcd_Clear();
     194:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
					 H_Lcd_Write_String("Enter The PS ");
     198:	8a e0       	ldi	r24, 0x0A	; 10
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
					 
					 H_LcdSecondLine();//go to second line position 0
     1a0:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
		 {
			 if (Key_Pad_reading=='C' || Key_Pad_reading=='=')
			 {
				 if(Key_Pad_reading=='C'){
					 
					 array_len=0;// storing from index 0 again
     1a4:	e1 2c       	mov	r14, r1
     1a6:	23 c1       	rjmp	.+582    	; 0x3ee <main+0x35c>
					 flag=1 ;
					 
				 }
				 
				 }else{// hina else 34an mitba3at4 "C"
				 H_Lcd_Write_Char(Key_Pad_reading);
     1a8:	81 2f       	mov	r24, r17
     1aa:	0e 94 b3 04 	call	0x966	; 0x966 <H_Lcd_Write_Char>
				 
				 arr[array_len]=Key_Pad_reading;// store the returned character in array
     1ae:	e1 e0       	ldi	r30, 0x01	; 1
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	ec 0f       	add	r30, r28
     1b4:	fd 1f       	adc	r31, r29
     1b6:	ee 0d       	add	r30, r14
     1b8:	f1 1d       	adc	r31, r1
     1ba:	10 83       	st	Z, r17
				 H_CoursorIncrement(); // Cursor increment
     1bc:	0e 94 be 04 	call	0x97c	; 0x97c <H_CoursorIncrement>
				 array_len++; //to store the new character in a next index
     1c0:	e3 94       	inc	r14
				 Number_Of_PS++;
     1c2:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <Number_Of_PS>
     1c6:	8f 5f       	subi	r24, 0xFF	; 255
     1c8:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <Number_Of_PS>
     1cc:	10 c1       	rjmp	.+544    	; 0x3ee <main+0x35c>
	while(1){
		
		 Key_Pad_reading=KeypadRead();
		 
		 /*this loop to copy the number in array and print it in lcd */
		 while (i!=16 && Key_Pad_reading!='a') //كود كتابه كلمه واكمل عليها من غير ماامسح
     1ce:	81 36       	cpi	r24, 0x61	; 97
     1d0:	e1 f6       	brne	.-72     	; 0x18a <main+0xf8>
     1d2:	0d c1       	rjmp	.+538    	; 0x3ee <main+0x35c>

			/* this code to compare the entered data from the keypad in user mode 
			 and to select the position */
			
			 for(u8 i =0 ;i<3;++i){
				 if(Number_Of_PS !=3){
     1d4:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <Number_Of_PS>
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	51 f4       	brne	.+20     	; 0x1f0 <main+0x15e>
					 returned_value =0 ;
					 break;
				 }
				 if (User_One_Ps[i]!=arr[i]) { //i have  problem here that not valid to use && (Number_Of_PS !=3)
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	8c 11       	cpse	r24, r12
     1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <main+0x15e>
     1e2:	8a 81       	ldd	r24, Y+2	; 0x02
     1e4:	8b 11       	cpse	r24, r11
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <main+0x15e>
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	8a 15       	cp	r24, r10
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <main+0x15e>
     1ee:	01 c1       	rjmp	.+514    	; 0x3f2 <main+0x360>

			 if (returned_value ==0 )
			 {
				 for(u8 i =0 ;i<3;++i){
					 
					 if(User_2_Ps[i]!=arr[i]){
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	89 11       	cpse	r24, r9
     1f4:	0a c0       	rjmp	.+20     	; 0x20a <main+0x178>
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	88 11       	cpse	r24, r8
     1fa:	07 c0       	rjmp	.+14     	; 0x20a <main+0x178>
     1fc:	8b 81       	ldd	r24, Y+3	; 0x03
     1fe:	87 15       	cp	r24, r7
     200:	a1 f1       	breq	.+104    	; 0x26a <main+0x1d8>
     202:	03 c0       	rjmp	.+6      	; 0x20a <main+0x178>
						 break;
					 }
			 }                                                         			 
		
			 }
			 if (returned_value ==2)
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	f2 12       	cpse	r15, r18
     208:	f7 c0       	rjmp	.+494    	; 0x3f8 <main+0x366>
			 {
				 for(u8 i =0 ;i<3;++i){
					 if(User_3_Ps[i]!=arr[i]){
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	86 11       	cpse	r24, r6
     20e:	07 c0       	rjmp	.+14     	; 0x21e <main+0x18c>
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	82 11       	cpse	r24, r2
     214:	04 c0       	rjmp	.+8      	; 0x21e <main+0x18c>
     216:	8b 81       	ldd	r24, Y+3	; 0x03
     218:	39 89       	ldd	r19, Y+17	; 0x11
     21a:	83 17       	cp	r24, r19
     21c:	89 f0       	breq	.+34     	; 0x240 <main+0x1ae>
					 }
				 }
		 } if (returned_value ==3)
		 {
			 for(u8 i =0 ;i<1;++i){
				 if(Keypad_LED_on[i]!=arr[i]){
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	83 15       	cp	r24, r3
     222:	09 f4       	brne	.+2      	; 0x226 <main+0x194>
     224:	54 c0       	rjmp	.+168    	; 0x2ce <main+0x23c>
     226:	03 c0       	rjmp	.+6      	; 0x22e <main+0x19c>
					 returned_value=4;
					 break;
				 }
			 }
	 } if (returned_value ==4)
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	f8 12       	cpse	r15, r24
     22c:	e9 c0       	rjmp	.+466    	; 0x400 <__LOCK_REGION_LENGTH__>
	 {
		 for(u8 i =0 ;i<1;++i){
			 if(Keypad_cond_On[i]!=arr[i]){
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	84 15       	cp	r24, r4
     232:	09 f4       	brne	.+2      	; 0x236 <main+0x1a4>
     234:	60 c0       	rjmp	.+192    	; 0x2f6 <main+0x264>
			 }
		 }
 } if (returned_value ==5)
 {
	 for(u8 i =0 ;i<1;++i){
		 if(Keypad_cond_OFF[i]!=arr[i]){
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	85 15       	cp	r24, r5
     23a:	09 f4       	brne	.+2      	; 0x23e <main+0x1ac>
     23c:	70 c0       	rjmp	.+224    	; 0x31e <main+0x28c>
     23e:	87 c0       	rjmp	.+270    	; 0x34e <main+0x2bc>
     240:	68 94       	set
     242:	ff 24       	eor	r15, r15
     244:	f1 f8       	bld	r15, 1
			 
			 
			 /**************************Password Part ********************************************/
		
	 		 
			 if (res==1){
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	f9 12       	cpse	r15, r25
     24a:	0d c0       	rjmp	.+26     	; 0x266 <main+0x1d4>
				 H_Lcd_Clear();
     24c:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Welcome user1 ");
     250:	88 e1       	ldi	r24, 0x18	; 24
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				// H_EppromWrite("user1",0b1010110);
				 H_LcdSecondLine();
     258:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
				 M_UsartSendString("\r\nAdmin !!\r\n You have a message\r\n There is a user_One logged in\r\n");
     25c:	87 e2       	ldi	r24, 0x27	; 39
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
     264:	a3 c0       	rjmp	.+326    	; 0x3ac <main+0x31a>
				 
				 
				 }else if (res==0){
     266:	f1 10       	cpse	r15, r1
     268:	14 c0       	rjmp	.+40     	; 0x292 <main+0x200>
				 H_Lcd_Clear();
     26a:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Welcome user2 ");
     26e:	89 e6       	ldi	r24, 0x69	; 105
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				H_EppromWrite("user2",0b10100100);
     276:	64 ea       	ldi	r22, 0xA4	; 164
     278:	28 e7       	ldi	r18, 0x78	; 120
     27a:	32 e0       	ldi	r19, 0x02	; 2
     27c:	82 2f       	mov	r24, r18
     27e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <H_EppromWrite>
				 H_LcdSecondLine();
     282:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
				 M_UsartSendString("\r\nAdmin !!\r\n You have a message\r\n There is a user_Two logged in\r\n");
     286:	8e e7       	ldi	r24, 0x7E	; 126
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
     28e:	f1 2c       	mov	r15, r1
     290:	8d c0       	rjmp	.+282    	; 0x3ac <main+0x31a>
			     }
			     else if (res==2){
     292:	32 e0       	ldi	r19, 0x02	; 2
     294:	f3 12       	cpse	r15, r19
     296:	18 c0       	rjmp	.+48     	; 0x2c8 <main+0x236>
				 H_Lcd_Clear();
     298:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Welcome user3 ");
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				 H_LcdSecondLine();
     2a4:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
				 H_EppromWrite("UU",0b10100100);
     2a8:	64 ea       	ldi	r22, 0xA4	; 164
     2aa:	2f ec       	ldi	r18, 0xCF	; 207
     2ac:	32 e0       	ldi	r19, 0x02	; 2
     2ae:	82 2f       	mov	r24, r18
     2b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <H_EppromWrite>
     2b4:	3f ef       	ldi	r19, 0xFF	; 255
     2b6:	81 ee       	ldi	r24, 0xE1	; 225
     2b8:	94 e0       	ldi	r25, 0x04	; 4
     2ba:	31 50       	subi	r19, 0x01	; 1
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	90 40       	sbci	r25, 0x00	; 0
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x228>
     2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x232>
     2c4:	00 00       	nop
     2c6:	72 c0       	rjmp	.+228    	; 0x3ac <main+0x31a>
				  _delay_ms(100);
				 //M_UsartSendString("\r\nAdmin !!\r\n You have a message\r\n There is a user_Three logged in\r\n");
			//	 M_UsartSendString("The Last is \r\n");
			//_delay_ms(100);
			// M_UsartSendString(H_EppromRead(0b1010110));
				 }else if(res==3){
     2c8:	23 e0       	ldi	r18, 0x03	; 3
     2ca:	f2 12       	cpse	r15, r18
     2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <main+0x25e>
				 H_Lcd_Clear();
     2ce:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
			     H_Lcd_Write_String("LED ON ");
     2d2:	82 ed       	ldi	r24, 0xD2	; 210
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				 SET_BIT(DDRC,3);
     2da:	a3 9a       	sbi	0x14, 3	; 20
				 SET_BIT(PORTC,3);
     2dc:	ab 9a       	sbi	0x15, 3	; 21
				 M_UsartSendString("\r\nAdmin !!\r\n You have a message\r\n There is a user_RUN LED\r\n\r\n");
     2de:	8a ed       	ldi	r24, 0xDA	; 218
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f3 e0       	ldi	r31, 0x03	; 3
     2ea:	ff 2e       	mov	r15, r31
     2ec:	f0 2d       	mov	r31, r0
     2ee:	5e c0       	rjmp	.+188    	; 0x3ac <main+0x31a>
				
				 }else if(res==4){
     2f0:	34 e0       	ldi	r19, 0x04	; 4
     2f2:	f3 12       	cpse	r15, r19
     2f4:	11 c0       	rjmp	.+34     	; 0x318 <main+0x286>
				 H_Lcd_Clear();
     2f6:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 
				 H_Lcd_Write_String("DC ON ");
     2fa:	88 e1       	ldi	r24, 0x18	; 24
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				
					u8 p= TEMP_S_READ();
     302:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <TEMP_S_READ>
					if (p>=27)
     306:	8b 31       	cpi	r24, 0x1B	; 27
     308:	08 f4       	brcc	.+2      	; 0x30c <main+0x27a>
     30a:	7f c0       	rjmp	.+254    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
					{
						DC_ON();
     30c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <DC_ON>
     310:	68 94       	set
     312:	ff 24       	eor	r15, r15
     314:	f2 f8       	bld	r15, 2
     316:	4a c0       	rjmp	.+148    	; 0x3ac <main+0x31a>
					}
			    }else if(res==5){
     318:	85 e0       	ldi	r24, 0x05	; 5
     31a:	f8 12       	cpse	r15, r24
     31c:	15 c0       	rjmp	.+42     	; 0x348 <main+0x2b6>
			    H_Lcd_Clear();
     31e:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
			    H_Lcd_Write_String("DC OFF ");
     322:	8f e1       	ldi	r24, 0x1F	; 31
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				// هنا مكان dc ي اشرف 
				
					u8 n=TEMP_S_READ();
     32a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <TEMP_S_READ>
						if (n<27)
     32e:	8b 31       	cpi	r24, 0x1B	; 27
     330:	10 f4       	brcc	.+4      	; 0x336 <main+0x2a4>
						{
							DC_OFF();
     332:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DC_OFF>
						}
				
				 M_UsartSendString("\r\nAdmin !!\r\n You have a message\r\n There is a user_OFF air conditioning\r\n\r\n");
     336:	87 e2       	ldi	r24, 0x27	; 39
     338:	93 e0       	ldi	r25, 0x03	; 3
     33a:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
     33e:	0f 2e       	mov	r0, r31
     340:	f5 e0       	ldi	r31, 0x05	; 5
     342:	ff 2e       	mov	r15, r31
     344:	f0 2d       	mov	r31, r0
     346:	32 c0       	rjmp	.+100    	; 0x3ac <main+0x31a>
				}
				  if(res==6){ // incorrect Password
     348:	96 e0       	ldi	r25, 0x06	; 6
     34a:	f9 12       	cpse	r15, r25
     34c:	2f c0       	rjmp	.+94     	; 0x3ac <main+0x31a>
				 //iteration of incorrect pasword 
				 count++ ;//kol ma hid5l hina hizid 1 l7ad 3 alarm
     34e:	d3 94       	inc	r13
				 H_Lcd_Clear();
     350:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Incorrect Password ");
     354:	82 e7       	ldi	r24, 0x72	; 114
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	3d e3       	ldi	r19, 0x3D	; 61
     360:	89 e4       	ldi	r24, 0x49	; 73
     362:	21 50       	subi	r18, 0x01	; 1
     364:	30 40       	sbci	r19, 0x00	; 0
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <main+0x2d0>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x2da>
     36c:	00 00       	nop

				 _delay_ms(1500);
				 H_Lcd_Clear();
     36e:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Try Again ");
     372:	86 e8       	ldi	r24, 0x86	; 134
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
     37a:	9f ef       	ldi	r25, 0xFF	; 255
     37c:	2d e3       	ldi	r18, 0x3D	; 61
     37e:	39 e4       	ldi	r19, 0x49	; 73
     380:	91 50       	subi	r25, 0x01	; 1
     382:	20 40       	sbci	r18, 0x00	; 0
     384:	30 40       	sbci	r19, 0x00	; 0
     386:	e1 f7       	brne	.-8      	; 0x380 <main+0x2ee>
     388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x2f8>
     38a:	00 00       	nop
				 _delay_ms(1500);
				 H_Lcd_Clear();
     38c:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Enter The PS ");
     390:	8a e0       	ldi	r24, 0x0A	; 10
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				 H_LcdSecondLine();
     398:	0e 94 ba 04 	call	0x974	; 0x974 <H_LcdSecondLine>
				 M_UsartSendString("\r\nBe aware ...\r\nthere are incorrect attempts to enter\r\n");
     39c:	81 e9       	ldi	r24, 0x91	; 145
     39e:	93 e0       	ldi	r25, 0x03	; 3
     3a0:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f6 e0       	ldi	r31, 0x06	; 6
     3a8:	ff 2e       	mov	r15, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	91 ee       	ldi	r25, 0xE1	; 225
     3b0:	24 e0       	ldi	r18, 0x04	; 4
     3b2:	81 50       	subi	r24, 0x01	; 1
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	20 40       	sbci	r18, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0x320>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x32a>
     3bc:	00 00       	nop
			/***********/
			
			 
			 /**************************EEPROM And Storing The Last User  Part ********************************************/
			_delay_ms(100);
		 Last_user=H_EppromRead(0b10100100);
     3be:	84 ea       	ldi	r24, 0xA4	; 164
     3c0:	0e 94 0b 03 	call	0x616	; 0x616 <H_EppromRead>
		
		 
		
			 /***************************return any thing to the basic position to start new iteration*********************/
			 flag=0;
			 Number_Of_PS=0 ; // More Important to be Zero
     3c4:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <Number_Of_PS>
			 
			 /***********************This To Select The Number Of iteration for Enter The ps********************************/
			 if (count>2)
     3c8:	32 e0       	ldi	r19, 0x02	; 2
     3ca:	3d 15       	cp	r19, r13
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <main+0x33e>
     3ce:	d5 ce       	rjmp	.-598    	; 0x17a <main+0xe8>
			 {
				 /*this Count expresses the number of wrong iterations*/ 
				 H_Lcd_Clear();
     3d0:	0e 94 99 04 	call	0x932	; 0x932 <H_Lcd_Clear>
				 H_Lcd_Write_String("Sorry Can't Open ");
     3d4:	89 ec       	ldi	r24, 0xC9	; 201
     3d6:	93 e0       	ldi	r25, 0x03	; 3
     3d8:	0e 94 9d 04 	call	0x93a	; 0x93a <H_Lcd_Write_String>
				 H_BuzzerOn();
     3dc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <H_BuzzerOn>
				 M_UsartSendString("\r\nBe aware ...\r\nthere are THREE incorrect attempts to enter\r\n");
     3e0:	8b ed       	ldi	r24, 0xDB	; 219
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
		 
		 if (flag==1){ // all of this if the user enter = this mean he completed his password 
			 /*this is flag fired when the user enter = this mean that he ended enter the data*/
			 
			 i=0 ;
			 array_len=0 ;
     3e8:	e1 2c       	mov	r14, r1
		 }
		 
		 if (flag==1){ // all of this if the user enter = this mean he completed his password 
			 /*this is flag fired when the user enter = this mean that he ended enter the data*/
			 
			 i=0 ;
     3ea:	00 e0       	ldi	r16, 0x00	; 0
     3ec:	c8 ce       	rjmp	.-624    	; 0x17e <main+0xec>
				 M_UsartSendString("\r\nBe aware ...\r\nthere are THREE incorrect attempts to enter\r\n");
				 
			 }
			 /**********if the Flag not 1 this mean the user still enter the number ***************************************/
			 }else{
			 ++i ;
     3ee:	0f 5f       	subi	r16, 0xFF	; 255
     3f0:	c6 ce       	rjmp	.-628    	; 0x17e <main+0xec>
					 returned_value =0 ;
					 break;
				 }
			 }

			 if (returned_value ==0 )
     3f2:	f1 10       	cpse	r15, r1
     3f4:	07 cf       	rjmp	.-498    	; 0x204 <main+0x172>
     3f6:	fc ce       	rjmp	.-520    	; 0x1f0 <main+0x15e>
					 if(User_3_Ps[i]!=arr[i]){
						 returned_value=3;
						 break;
					 }
				 }
		 } if (returned_value ==3)
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	f8 12       	cpse	r15, r24
     3fc:	15 cf       	rjmp	.-470    	; 0x228 <main+0x196>
     3fe:	0f cf       	rjmp	.-482    	; 0x21e <main+0x18c>
			 if(Keypad_cond_On[i]!=arr[i]){
				 returned_value=5;
				 break;
			 }
		 }
 } if (returned_value ==5)
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	f9 16       	cp	r15, r25
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	17 cf       	rjmp	.-466    	; 0x236 <main+0x1a4>
     408:	1e cf       	rjmp	.-452    	; 0x246 <main+0x1b4>
     40a:	68 94       	set
     40c:	ff 24       	eor	r15, r15
     40e:	f2 f8       	bld	r15, 2
     410:	cd cf       	rjmp	.-102    	; 0x3ac <main+0x31a>

00000412 <__vector_13>:


       

	
	ISR(USART_RXC_vect){
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
		
		
		
		
		Uart_Data=UDR; //الداتا بتاعك جهزت تعالي خدها
     438:	8c b1       	in	r24, 0x0c	; 12
     43a:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <Uart_Data>
	
		
		/*I will take every letter that the user enters and store it so that 
		I can go to compare it. I will store it until I press =*/
			if (Uart_Data!='=')
     43e:	8d 33       	cpi	r24, 0x3D	; 61
     440:	59 f0       	breq	.+22     	; 0x458 <__vector_13+0x46>
			{
				                        /*Assign the entered data in array to check it */
				Data_check[i]=Uart_Data;
     442:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <i>
     446:	e9 2f       	mov	r30, r25
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	ec 59       	subi	r30, 0x9C	; 156
     44c:	fb 4f       	sbci	r31, 0xFB	; 251
     44e:	80 83       	st	Z, r24
				++i;
     450:	9f 5f       	subi	r25, 0xFF	; 255
     452:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <i>
     456:	8c c0       	rjmp	.+280    	; 0x570 <__vector_13+0x15e>
				                       /*when the user completely enter the data that mean this data ready to compare */
			}else if (Uart_Data=='='){
			
		for (u8 j=0;j<i;j++)
     458:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <i>
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <__vector_13+0x50>
     460:	77 c0       	rjmp	.+238    	; 0x550 <__vector_13+0x13e>
     462:	c0 e0       	ldi	r28, 0x00	; 0
		{ 
			                         /*Because it is about letters, so each letter will be compared to it alone*/
		if (Data_check[j]==Entered_data[j])
     464:	8c 2f       	mov	r24, r28
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	fc 01       	movw	r30, r24
     46a:	ec 59       	subi	r30, 0x9C	; 156
     46c:	fb 4f       	sbci	r31, 0xFB	; 251
     46e:	dc 01       	movw	r26, r24
     470:	af 59       	subi	r26, 0x9F	; 159
     472:	bf 4f       	sbci	r27, 0xFF	; 255
     474:	20 81       	ld	r18, Z
     476:	8c 91       	ld	r24, X
     478:	28 13       	cpse	r18, r24
     47a:	06 c0       	rjmp	.+12     	; 0x488 <__vector_13+0x76>
		{
			int_flag++ ;
     47c:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <__data_end>
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <__data_end>
     486:	02 c0       	rjmp	.+4      	; 0x48c <__vector_13+0x7a>
		}else{
			                      /*make this equal 0to be ready for another iteration*/
			i=0;
     488:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <i>
			 
			/*LED Code*/
		}
			if (Data_check[i]=='1'){
     48c:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ec 59       	subi	r30, 0x9C	; 156
     494:	fb 4f       	sbci	r31, 0xFB	; 251
     496:	80 81       	ld	r24, Z
     498:	81 33       	cpi	r24, 0x31	; 49
     49a:	11 f4       	brne	.+4      	; 0x4a0 <__vector_13+0x8e>
				//i=0;
				/*switch on the led */
				SET_BIT(DDRC,2);
     49c:	a2 9a       	sbi	0x14, 2	; 20
				SET_BIT(PORTC,2);
     49e:	aa 9a       	sbi	0x15, 2	; 21
				/*Switch off the leds*/ 
			}if (Data_check[i]=='C')
     4a0:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ec 59       	subi	r30, 0x9C	; 156
     4a8:	fb 4f       	sbci	r31, 0xFB	; 251
     4aa:	80 81       	ld	r24, Z
     4ac:	83 34       	cpi	r24, 0x43	; 67
     4ae:	29 f4       	brne	.+10     	; 0x4ba <__vector_13+0xa8>
			{
				CLR_BIT(PORTC,2);
     4b0:	aa 98       	cbi	0x15, 2	; 21
				CLR_BIT(PORTC,3);
     4b2:	ab 98       	cbi	0x15, 3	; 21
				CLR_BIT(PORTD,2);
     4b4:	92 98       	cbi	0x12, 2	; 18
				CLR_BIT(PORTD,3);
     4b6:	93 98       	cbi	0x12, 3	; 18
				CLR_BIT(PORTA,3);
     4b8:	db 98       	cbi	0x1b, 3	; 27
				//CLR_BIT(PORTB,7);
			}
			if ((Data_check[i]=='2'))
     4ba:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ec 59       	subi	r30, 0x9C	; 156
     4c2:	fb 4f       	sbci	r31, 0xFB	; 251
     4c4:	80 81       	ld	r24, Z
     4c6:	82 33       	cpi	r24, 0x32	; 50
     4c8:	11 f4       	brne	.+4      	; 0x4ce <__vector_13+0xbc>
			{
				SET_BIT(DDRC,3);
     4ca:	a3 9a       	sbi	0x14, 3	; 20
				SET_BIT(PORTC,3);
     4cc:	ab 9a       	sbi	0x15, 3	; 21
			//	i=0;
			}if (Data_check[i]=='3')
     4ce:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	ec 59       	subi	r30, 0x9C	; 156
     4d6:	fb 4f       	sbci	r31, 0xFB	; 251
     4d8:	80 81       	ld	r24, Z
     4da:	83 33       	cpi	r24, 0x33	; 51
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <__vector_13+0xd0>
			{
				SET_BIT(DDRD,2);
     4de:	8a 9a       	sbi	0x11, 2	; 17
				SET_BIT(PORTD,2);
     4e0:	92 9a       	sbi	0x12, 2	; 18
			//	i=0;
			}if (Data_check[i]=='4')
     4e2:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	ec 59       	subi	r30, 0x9C	; 156
     4ea:	fb 4f       	sbci	r31, 0xFB	; 251
     4ec:	80 81       	ld	r24, Z
     4ee:	84 33       	cpi	r24, 0x34	; 52
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <__vector_13+0xe4>
			{
				 SET_BIT(DDRD,3);
     4f2:	8b 9a       	sbi	0x11, 3	; 17
				SET_BIT(PORTD,3);
     4f4:	93 9a       	sbi	0x12, 3	; 18
				//i=0;
		   }
		   /*Close the Door*/
		   if (Data_check[i]=='A'){
     4f6:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ec 59       	subi	r30, 0x9C	; 156
     4fe:	fb 4f       	sbci	r31, 0xFB	; 251
     500:	80 81       	ld	r24, Z
     502:	81 34       	cpi	r24, 0x41	; 65
     504:	21 f4       	brne	.+8      	; 0x50e <__vector_13+0xfc>
		   SERVO_MOVE(5) ;
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 cb 04 	call	0x996	; 0x996 <SERVO_MOVE>
		   
	         }
			  if (Data_check[i]=='N'){
     50e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <i>
     512:	e8 2f       	mov	r30, r24
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	ec 59       	subi	r30, 0x9C	; 156
     518:	fb 4f       	sbci	r31, 0xFB	; 251
     51a:	90 81       	ld	r25, Z
     51c:	9e 34       	cpi	r25, 0x4E	; 78
     51e:	a1 f4       	brne	.+40     	; 0x548 <__vector_13+0x136>
     520:	c0 e0       	ldi	r28, 0x00	; 0
     522:	d0 e0       	ldi	r29, 0x00	; 0
				  for(u8 i=0;i<10;++i){
					  SERVO_MOVE(i) ;
     524:	ce 01       	movw	r24, r28
     526:	0e 94 cb 04 	call	0x996	; 0x996 <SERVO_MOVE>
     52a:	21 96       	adiw	r28, 0x01	; 1
		   if (Data_check[i]=='A'){
		   SERVO_MOVE(5) ;
		   
	         }
			  if (Data_check[i]=='N'){
				  for(u8 i=0;i<10;++i){
     52c:	ca 30       	cpi	r28, 0x0A	; 10
     52e:	d1 05       	cpc	r29, r1
     530:	c9 f7       	brne	.-14     	; 0x524 <__vector_13+0x112>
			 /*Close the Door
			 }if (Data_check[i]=='B'){
				 SERVO_MOVE(5) ;
				 
			}*/
		   if (Data_check[i]=='5')
     532:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <i>
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	ec 59       	subi	r30, 0x9C	; 156
     53a:	fb 4f       	sbci	r31, 0xFB	; 251
     53c:	80 81       	ld	r24, Z
     53e:	85 33       	cpi	r24, 0x35	; 53
     540:	39 f4       	brne	.+14     	; 0x550 <__vector_13+0x13e>
		   {
			SET_BIT(DDRA,4);
     542:	d4 9a       	sbi	0x1a, 4	; 26
			SET_BIT(PORTA,4);
     544:	dc 9a       	sbi	0x1b, 4	; 27
     546:	04 c0       	rjmp	.+8      	; 0x550 <__vector_13+0x13e>
				Data_check[i]=Uart_Data;
				++i;
				                       /*when the user completely enter the data that mean this data ready to compare */
			}else if (Uart_Data=='='){
			
		for (u8 j=0;j<i;j++)
     548:	cf 5f       	subi	r28, 0xFF	; 255
     54a:	c8 17       	cp	r28, r24
     54c:	08 f4       	brcc	.+2      	; 0x550 <__vector_13+0x13e>
     54e:	8a cf       	rjmp	.-236    	; 0x464 <__vector_13+0x52>
			//i=0;
	     }
			break;
		}
			/*here int_flag mean the number of valid char*/
		}if (int_flag==Password_Leng)
     550:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <__data_end>
     554:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Password_Leng>
     558:	98 13       	cpse	r25, r24
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__vector_13+0x152>
		{
			M_UsartSendString("Wellcome Admin \r\n");
     55c:	89 e1       	ldi	r24, 0x19	; 25
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	0e 94 35 07 	call	0xe6a	; 0xe6a <M_UsartSendString>
			
		}
		
		/*Get ready, because when you come, you will never have a new operation*/
			i=0;
     564:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <i>
			int_flag=0;
     568:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <__data_end>
			Uart_Data=0;
     56c:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <Uart_Data>
			
		
		
		         
	          }
		   }
     570:	ff 91       	pop	r31
     572:	ef 91       	pop	r30
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63
     590:	0f 90       	pop	r0
     592:	1f 90       	pop	r1
     594:	18 95       	reti

00000596 <__vector_15>:
	ISR(USART_TXC_vect){
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
		
		
	}
     5a0:	0f 90       	pop	r0
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	0f 90       	pop	r0
     5a6:	1f 90       	pop	r1
     5a8:	18 95       	reti

000005aa <H_BuzzerInit>:
//#include "DIO.h"

#include <util/delay.h>
# define F_CPU 16000000UL
void H_BuzzerInit(void){
	M_PinMode(BUZZER_PIN,OUTPUT);
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	81 e2       	ldi	r24, 0x21	; 33
     5ae:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     5b2:	08 95       	ret

000005b4 <H_BuzzerOn>:
}
void H_BuzzerOn(void){
	M_PinWrite(BUZZER_PIN,HIGH);
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	81 e2       	ldi	r24, 0x21	; 33
     5b8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     5bc:	08 95       	ret

000005be <DC_INIT>:
#include "BIT_MATH.h"
#include "DIO.h"
#include "STD_TYPES.h"
void DC_INIT(void)
{
	M_PinMode(PD7,OUTPUT);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	81 e1       	ldi	r24, 0x11	; 17
     5c2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     5c6:	08 95       	ret

000005c8 <DC_ON>:
}
void DC_ON(void)
{
	M_PinWrite(PD7,HIGH);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	81 e1       	ldi	r24, 0x11	; 17
     5cc:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     5d0:	08 95       	ret

000005d2 <DC_OFF>:
}
void DC_OFF(void)
{
	M_PinWrite(PD7,LOW);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	81 e1       	ldi	r24, 0x11	; 17
     5d6:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     5da:	08 95       	ret

000005dc <H_EppromInit>:
#include "DIO.h"
#include "BUZZER.h"
# define F_CPU 16000000UL
#include <util/delay.h>
void H_EppromInit(void){
	M_I2cMasterInit();
     5dc:	0e 94 41 06 	call	0xc82	; 0xc82 <M_I2cMasterInit>
     5e0:	08 95       	ret

000005e2 <H_EppromWrite>:
}
void H_EppromWrite(u8 data,u8 address){
     5e2:	cf 93       	push	r28
     5e4:	c6 2f       	mov	r28, r22
	// u8 x=address>>1 ;
	
	M_I2cStartCondition();
     5e6:	0e 94 52 06 	call	0xca4	; 0xca4 <M_I2cStartCondition>

	M_I2cSendSlaveAddress_Write(0x50);
     5ea:	80 e5       	ldi	r24, 0x50	; 80
     5ec:	0e 94 76 06 	call	0xcec	; 0xcec <M_I2cSendSlaveAddress_Write>
	
    M_I2cMasterSend_Data(address);
     5f0:	8c 2f       	mov	r24, r28
     5f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <M_I2cMasterSend_Data>
		
	
	M_I2cMasterSend_Data(0x50);
     5f6:	80 e5       	ldi	r24, 0x50	; 80
     5f8:	0e 94 af 06 	call	0xd5e	; 0xd5e <M_I2cMasterSend_Data>
	
	M_I2cStopCondition();
     5fc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <M_I2cStopCondition>
     600:	2f ef       	ldi	r18, 0xFF	; 255
     602:	80 e7       	ldi	r24, 0x70	; 112
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <H_EppromWrite+0x24>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <H_EppromWrite+0x2e>
     610:	00 00       	nop
	_delay_ms(50);
	//معظم المشاكل هنا ف جزء الديلاي  
	//لازم هنا يكون في delay
		
}
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <H_EppromRead>:

u8 H_EppromRead(u8 address){
     616:	cf 93       	push	r28
     618:	c8 2f       	mov	r28, r24
	
		M_I2cStartCondition();
     61a:	0e 94 52 06 	call	0xca4	; 0xca4 <M_I2cStartCondition>
	
		
		M_I2cSendSlaveAddress_Write(0x50);//مهم جدا الترتيب لازم الاول تكون دي ف الفانكشن بتاعهتا 
     61e:	80 e5       	ldi	r24, 0x50	; 80
     620:	0e 94 76 06 	call	0xcec	; 0xcec <M_I2cSendSlaveAddress_Write>
		
		M_I2cMasterSend_Data(address);
     624:	8c 2f       	mov	r24, r28
     626:	0e 94 af 06 	call	0xd5e	; 0xd5e <M_I2cMasterSend_Data>
		
		M_I2cRepeatedStCondition();//مهم جدا هنا لازم اعمل ستارت الاول ..اول حاجه خالص 
     62a:	0e 94 d3 06 	call	0xda6	; 0xda6 <M_I2cRepeatedStCondition>
	
		M_I2cSendSlaveAddress_Read(0x50);
     62e:	80 e5       	ldi	r24, 0x50	; 80
     630:	0e 94 92 06 	call	0xd24	; 0xd24 <M_I2cSendSlaveAddress_Read>
			 	_delay_ms(500);
			 	H_BuzzerOff();
		 	}*/
		//M_I2cMasterSend_Data(1);
		
		u8 x=M_I2cMasterReceive_Data();//هنا هترق معايا لو كنت عايز استلم بايت واحد ولا لا هتفرق ف الرقم ال هتاكد منه الاكنلوج
     634:	0e 94 c1 06 	call	0xd82	; 0xd82 <M_I2cMasterReceive_Data>
     638:	c8 2f       	mov	r28, r24
		M_I2cStopCondition();
     63a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <M_I2cStopCondition>
		return  x ;
}
     63e:	8c 2f       	mov	r24, r28
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <KeypadInit>:
                           {'1','2','3','-'},
                           {'C','0','=','+'}};
	  
void KeypadInit(void){
	/*make the first 4 pins output */
	M_PinMode(KAY_PAD_ROW_PIN_1,OUTPUT);
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	88 e1       	ldi	r24, 0x18	; 24
     648:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_ROW_PIN_2,OUTPUT);
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	89 e1       	ldi	r24, 0x19	; 25
     650:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_ROW_PIN_3,OUTPUT);
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	8a e1       	ldi	r24, 0x1A	; 26
     658:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_ROW_PIN_4,OUTPUT);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	8b e1       	ldi	r24, 0x1B	; 27
     660:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	/*make it by default high */
	M_PinWrite(KAY_PAD_ROW_PIN_1,HIGH);
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	88 e1       	ldi	r24, 0x18	; 24
     668:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_ROW_PIN_2,HIGH);
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	89 e1       	ldi	r24, 0x19	; 25
     670:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_ROW_PIN_3,HIGH);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	8a e1       	ldi	r24, 0x1A	; 26
     678:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_ROW_PIN_4,HIGH);
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	8b e1       	ldi	r24, 0x1B	; 27
     680:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	/*make the second is inputs to read from them*/
	M_PinMode(KAY_PAD_COL_PIN_1,INPUT);
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	82 e2       	ldi	r24, 0x22	; 34
     688:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_COL_PIN_2,INPUT);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	83 e2       	ldi	r24, 0x23	; 35
     690:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_COL_PIN_3,INPUT);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	84 e2       	ldi	r24, 0x24	; 36
     698:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	M_PinMode(KAY_PAD_COL_PIN_4,INPUT);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	85 e2       	ldi	r24, 0x25	; 37
     6a0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
	/*active the internal pull up resistor by put 1 in port register
	to make the buttons see 1 in the normal mode */ 
	M_PinWrite(KAY_PAD_COL_PIN_1,HIGH);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	82 e2       	ldi	r24, 0x22	; 34
     6a8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_COL_PIN_2,HIGH);
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	83 e2       	ldi	r24, 0x23	; 35
     6b0:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_COL_PIN_3,HIGH);
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	84 e2       	ldi	r24, 0x24	; 36
     6b8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	M_PinWrite(KAY_PAD_COL_PIN_4,HIGH);
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	85 e2       	ldi	r24, 0x25	; 37
     6c0:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     6c4:	08 95       	ret

000006c6 <KeypadRead>:
}

u8 KeypadRead(void){
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
	u8 col=0;
	u8 flag=0;
	u8 symbol_returned='a';
	u8 temp =0 ;
	
	for ( row =0 ;row<4;row++)
     6ce:	10 e0       	ldi	r17, 0x00	; 0
	{
		M_PinWrite((row+KAY_PAD_ROW_PIN_1),LOW);
     6d0:	08 e1       	ldi	r16, 0x18	; 24
     6d2:	01 0f       	add	r16, r17
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	80 2f       	mov	r24, r16
     6d8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
		for (col=0;col<4;col++)
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
		{
			temp=M_PinRead(KAY_PAD_COL_PIN_1+col);
     6de:	d2 e2       	ldi	r29, 0x22	; 34
     6e0:	dc 0f       	add	r29, r28
     6e2:	8d 2f       	mov	r24, r29
     6e4:	0e 94 0a 06 	call	0xc14	; 0xc14 <M_PinRead>
			if (temp==pressed)
     6e8:	81 11       	cpse	r24, r1
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <KeypadRead+0x48>
			{
					symbol_returned=Kaypad_symbols[row][col];
     6ec:	e1 2f       	mov	r30, r17
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	eb 58       	subi	r30, 0x8B	; 139
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	ec 0f       	add	r30, r28
     6fe:	f1 1d       	adc	r31, r1
     700:	c0 81       	ld	r28, Z
			flag=1;
				while(temp==pressed){
					temp=M_PinRead(KAY_PAD_COL_PIN_1+col);	//kan fi 3'alta hina da kda 7L mo4kilt el bouncing 
     702:	8d 2f       	mov	r24, r29
     704:	0e 94 0a 06 	call	0xc14	; 0xc14 <M_PinRead>
			temp=M_PinRead(KAY_PAD_COL_PIN_1+col);
			if (temp==pressed)
			{
					symbol_returned=Kaypad_symbols[row][col];
			flag=1;
				while(temp==pressed){
     708:	88 23       	and	r24, r24
     70a:	d9 f3       	breq	.-10     	; 0x702 <KeypadRead+0x3c>
     70c:	0c c0       	rjmp	.+24     	; 0x726 <KeypadRead+0x60>
	u8 temp =0 ;
	
	for ( row =0 ;row<4;row++)
	{
		M_PinWrite((row+KAY_PAD_ROW_PIN_1),LOW);
		for (col=0;col<4;col++)
     70e:	cf 5f       	subi	r28, 0xFF	; 255
     710:	c4 30       	cpi	r28, 0x04	; 4
     712:	29 f7       	brne	.-54     	; 0x6de <KeypadRead+0x18>
					break;
				}
			}  
			
		}
		M_PinWrite((row+KAY_PAD_ROW_PIN_1),HIGH);
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	80 2f       	mov	r24, r16
     718:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
	u8 col=0;
	u8 flag=0;
	u8 symbol_returned='a';
	u8 temp =0 ;
	
	for ( row =0 ;row<4;row++)
     71c:	1f 5f       	subi	r17, 0xFF	; 255
     71e:	14 30       	cpi	r17, 0x04	; 4
     720:	b9 f6       	brne	.-82     	; 0x6d0 <KeypadRead+0xa>
     722:	c1 e6       	ldi	r28, 0x61	; 97
     724:	04 c0       	rjmp	.+8      	; 0x72e <KeypadRead+0x68>
					break;
				}
			}  
			
		}
		M_PinWrite((row+KAY_PAD_ROW_PIN_1),HIGH);
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	80 2f       	mov	r24, r16
     72a:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
		}
	}
	
	
	return symbol_returned ;
}
     72e:	8c 2f       	mov	r24, r28
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret

0000073a <H_Lcd_Write_Cmd>:
	{
		H_Lcd_Write_Data(arr[temp-1]);
		--temp;
	}
	i=0 ;
}
     73a:	cf 93       	push	r28
     73c:	c8 2f       	mov	r28, r24
     73e:	8b b3       	in	r24, 0x1b	; 27
     740:	8f 70       	andi	r24, 0x0F	; 15
     742:	9c 2f       	mov	r25, r28
     744:	90 7f       	andi	r25, 0xF0	; 240
     746:	89 2b       	or	r24, r25
     748:	8b bb       	out	0x1b, r24	; 27
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	8f e1       	ldi	r24, 0x1F	; 31
     74e:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	80 e2       	ldi	r24, 0x20	; 32
     756:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	8e e1       	ldi	r24, 0x1E	; 30
     75e:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     762:	8f e1       	ldi	r24, 0x1F	; 31
     764:	9e e4       	ldi	r25, 0x4E	; 78
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <H_Lcd_Write_Cmd+0x2c>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <H_Lcd_Write_Cmd+0x32>
     76c:	00 00       	nop
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8e e1       	ldi	r24, 0x1E	; 30
     772:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     776:	8f e1       	ldi	r24, 0x1F	; 31
     778:	9e e4       	ldi	r25, 0x4E	; 78
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <H_Lcd_Write_Cmd+0x40>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <H_Lcd_Write_Cmd+0x46>
     780:	00 00       	nop
     782:	8b b3       	in	r24, 0x1b	; 27
     784:	28 2f       	mov	r18, r24
     786:	2f 70       	andi	r18, 0x0F	; 15
     788:	30 e1       	ldi	r19, 0x10	; 16
     78a:	c3 9f       	mul	r28, r19
     78c:	c0 01       	movw	r24, r0
     78e:	11 24       	eor	r1, r1
     790:	82 2b       	or	r24, r18
     792:	8b bb       	out	0x1b, r24	; 27
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	8f e1       	ldi	r24, 0x1F	; 31
     798:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	8e e1       	ldi	r24, 0x1E	; 30
     7a8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     7ac:	8f e1       	ldi	r24, 0x1F	; 31
     7ae:	9e e4       	ldi	r25, 0x4E	; 78
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <H_Lcd_Write_Cmd+0x76>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <H_Lcd_Write_Cmd+0x7c>
     7b6:	00 00       	nop
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     7c0:	8f e1       	ldi	r24, 0x1F	; 31
     7c2:	9e e4       	ldi	r25, 0x4E	; 78
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <H_Lcd_Write_Cmd+0x8a>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <H_Lcd_Write_Cmd+0x90>
     7ca:	00 00       	nop
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <H_LcdInit>:
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	8a bb       	out	0x1a, r24	; 26
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	8f e1       	ldi	r24, 0x1F	; 31
     7d8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	83 ed       	ldi	r24, 0xD3	; 211
     7e0:	90 e3       	ldi	r25, 0x30	; 48
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <H_LcdInit+0x12>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <H_LcdInit+0x1c>
     7ec:	00 00       	nop
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	80 e2       	ldi	r24, 0x20	; 32
     7f2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     7f6:	2f ef       	ldi	r18, 0xFF	; 255
     7f8:	81 ee       	ldi	r24, 0xE1	; 225
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	21 50       	subi	r18, 0x01	; 1
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	90 40       	sbci	r25, 0x00	; 0
     802:	e1 f7       	brne	.-8      	; 0x7fc <H_LcdInit+0x2c>
     804:	00 c0       	rjmp	.+0      	; 0x806 <H_LcdInit+0x36>
     806:	00 00       	nop
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     810:	2f ef       	ldi	r18, 0xFF	; 255
     812:	81 ee       	ldi	r24, 0xE1	; 225
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	21 50       	subi	r18, 0x01	; 1
     818:	80 40       	sbci	r24, 0x00	; 0
     81a:	90 40       	sbci	r25, 0x00	; 0
     81c:	e1 f7       	brne	.-8      	; 0x816 <H_LcdInit+0x46>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <H_LcdInit+0x50>
     820:	00 00       	nop
     822:	83 e3       	ldi	r24, 0x33	; 51
     824:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     828:	2f ef       	ldi	r18, 0xFF	; 255
     82a:	81 ee       	ldi	r24, 0xE1	; 225
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	80 40       	sbci	r24, 0x00	; 0
     832:	90 40       	sbci	r25, 0x00	; 0
     834:	e1 f7       	brne	.-8      	; 0x82e <H_LcdInit+0x5e>
     836:	00 c0       	rjmp	.+0      	; 0x838 <H_LcdInit+0x68>
     838:	00 00       	nop
     83a:	82 e3       	ldi	r24, 0x32	; 50
     83c:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	81 ee       	ldi	r24, 0xE1	; 225
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	21 50       	subi	r18, 0x01	; 1
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	90 40       	sbci	r25, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <H_LcdInit+0x76>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <H_LcdInit+0x80>
     850:	00 00       	nop
     852:	88 e2       	ldi	r24, 0x28	; 40
     854:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	81 ee       	ldi	r24, 0xE1	; 225
     85c:	94 e0       	ldi	r25, 0x04	; 4
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <H_LcdInit+0x8e>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
     86a:	8c e0       	ldi	r24, 0x0C	; 12
     86c:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	81 ee       	ldi	r24, 0xE1	; 225
     874:	94 e0       	ldi	r25, 0x04	; 4
     876:	21 50       	subi	r18, 0x01	; 1
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
     880:	00 00       	nop
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	81 ee       	ldi	r24, 0xE1	; 225
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <__stack+0x2f>
     896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
     898:	00 00       	nop
     89a:	86 e0       	ldi	r24, 0x06	; 6
     89c:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	81 ee       	ldi	r24, 0xE1	; 225
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
     8b0:	00 00       	nop
     8b2:	08 95       	ret

000008b4 <H_Lcd_Write_Data>:
     8b4:	cf 93       	push	r28
     8b6:	c8 2f       	mov	r28, r24
     8b8:	8b b3       	in	r24, 0x1b	; 27
     8ba:	8f 70       	andi	r24, 0x0F	; 15
     8bc:	9c 2f       	mov	r25, r28
     8be:	90 7f       	andi	r25, 0xF0	; 240
     8c0:	89 2b       	or	r24, r25
     8c2:	8b bb       	out	0x1b, r24	; 27
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	8f e1       	ldi	r24, 0x1F	; 31
     8c8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	80 e2       	ldi	r24, 0x20	; 32
     8d0:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	8e e1       	ldi	r24, 0x1E	; 30
     8d8:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     8dc:	8f e9       	ldi	r24, 0x9F	; 159
     8de:	9f e0       	ldi	r25, 0x0F	; 15
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <H_Lcd_Write_Data+0x2c>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <H_Lcd_Write_Data+0x32>
     8e6:	00 00       	nop
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8e e1       	ldi	r24, 0x1E	; 30
     8ec:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     8f0:	8b b3       	in	r24, 0x1b	; 27
     8f2:	28 2f       	mov	r18, r24
     8f4:	2f 70       	andi	r18, 0x0F	; 15
     8f6:	30 e1       	ldi	r19, 0x10	; 16
     8f8:	c3 9f       	mul	r28, r19
     8fa:	c0 01       	movw	r24, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	82 2b       	or	r24, r18
     900:	8b bb       	out	0x1b, r24	; 27
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	8f e1       	ldi	r24, 0x1F	; 31
     906:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	80 e2       	ldi	r24, 0x20	; 32
     90e:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	8e e1       	ldi	r24, 0x1E	; 30
     916:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     91a:	8f e9       	ldi	r24, 0x9F	; 159
     91c:	9f e0       	ldi	r25, 0x0F	; 15
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <H_Lcd_Write_Data+0x6a>
     922:	00 c0       	rjmp	.+0      	; 0x924 <H_Lcd_Write_Data+0x70>
     924:	00 00       	nop
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	8e e1       	ldi	r24, 0x1E	; 30
     92a:	0e 94 7f 05 	call	0xafe	; 0xafe <M_PinWrite>
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <H_Lcd_Clear>:
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     938:	08 95       	ret

0000093a <H_Lcd_Write_String>:
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	59 f0       	breq	.+22     	; 0x95e <H_Lcd_Write_String+0x24>
     948:	8f 01       	movw	r16, r30
     94a:	c0 e0       	ldi	r28, 0x00	; 0
     94c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <H_Lcd_Write_Data>
     950:	cf 5f       	subi	r28, 0xFF	; 255
     952:	f8 01       	movw	r30, r16
     954:	ec 0f       	add	r30, r28
     956:	f1 1d       	adc	r31, r1
     958:	80 81       	ld	r24, Z
     95a:	81 11       	cpse	r24, r1
     95c:	f7 cf       	rjmp	.-18     	; 0x94c <H_Lcd_Write_String+0x12>
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <H_Lcd_Write_Char>:

void H_Lcd_Write_Char(u8 chara){
	H_Lcd_Write_Data(chara);
     966:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <H_Lcd_Write_Data>
     96a:	08 95       	ret

0000096c <H_LcdFirstLine>:
}
void H_LcdFirstLine(void){
		H_Lcd_Write_Cmd(0x80);
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     972:	08 95       	ret

00000974 <H_LcdSecondLine>:
		
		
}
void H_LcdSecondLine(void){
	H_Lcd_Write_Cmd(0xC0 );
     974:	80 ec       	ldi	r24, 0xC0	; 192
     976:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     97a:	08 95       	ret

0000097c <H_CoursorIncrement>:
}
void H_CoursorIncrement(void){
	H_Lcd_Write_Cmd(0x06 );
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	0e 94 9d 03 	call	0x73a	; 0x73a <H_Lcd_Write_Cmd>
     982:	08 95       	ret

00000984 <SERVO_INIT>:
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     98c:	0e 94 ed 06 	call	0xdda	; 0xdda <PWM_1_INIT>
     990:	0e 94 12 07 	call	0xe24	; 0xe24 <PWM_1_START>
     994:	08 95       	ret

00000996 <SERVO_MOVE>:
     996:	0e 94 01 07 	call	0xe02	; 0xe02 <PWM_1_SET_DUTY_CYCLE>
     99a:	08 95       	ret

0000099c <TEMP_S_INIT>:
     99c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <M_AdcInit>
     9a0:	08 95       	ret

000009a2 <TEMP_S_READ>:
     9a2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <M_AdcRead>
     9a6:	9c 01       	movw	r18, r24
     9a8:	a4 ef       	ldi	r26, 0xF4	; 244
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	0e 94 95 09 	call	0x132a	; 0x132a <__umulhisi3>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	33 e0       	ldi	r19, 0x03	; 3
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__udivmodsi4>
     9bc:	c9 01       	movw	r24, r18
     9be:	08 95       	ret

000009c0 <M_AdcInit>:
	/*set the volage ref*/
	//#if VOLTAGE_REF_MODE==VoltageRefMode_1 
	//CLR_BIT(ADMUX,7);
	//CLR_BIT(ADMUX,6);
	//#elif VOLTAGE_REF_MODE==VoltageRefMode_2
	CLR_BIT(ADMUX,7);
     9c0:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX,6);
     9c2:	3e 9a       	sbi	0x07, 6	; 7
	
	/*select the start */
	//#if LEFT_ADJUST_MODE==Left_Adjust_Enable
	//SET_BIT(ADMUX,5);
	//#elif LEFT_ADJUST_MODE== right_Adjust_Enable
	CLR_BIT(ADMUX,5);
     9c4:	3d 98       	cbi	0x07, 5	; 7
	//#endif
	
		
	/*******ENABLE THE ADC *********/
	SET_BIT(ADCSRA,7);
     9c6:	37 9a       	sbi	0x06, 7	; 6
	
	/********AUTO TRRIGER *********/
	SET_BIT(ADCSRA,5);
     9c8:	35 9a       	sbi	0x06, 5	; 6
	/*******ADJUST THE PRESCALER /128*/
	SET_BIT(ADCSRA,0);
     9ca:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     9cc:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     9ce:	32 9a       	sbi	0x06, 2	; 6
     9d0:	08 95       	ret

000009d2 <M_AdcRead>:
}
u16 M_AdcRead(void){
	/*******START CONVERSION*******/
	u16 value=0;
	/*select the pin to take the reading */
SET_BIT(ADMUX,0);
     9d2:	38 9a       	sbi	0x07, 0	; 7
CLR_BIT(ADMUX,1);
     9d4:	39 98       	cbi	0x07, 1	; 7
CLR_BIT(ADMUX,2);
     9d6:	3a 98       	cbi	0x07, 2	; 7
CLR_BIT(ADMUX,3);
     9d8:	3b 98       	cbi	0x07, 3	; 7
CLR_BIT(ADMUX,4);
     9da:	3c 98       	cbi	0x07, 4	; 7
	SET_BIT(ADCSRA,6);
     9dc:	36 9a       	sbi	0x06, 6	; 6
	/*u8 adcL=0;
	u8 adcH=0;*/
	
	while(GET_BIT(ADCSRA,4)==0){
     9de:	34 9b       	sbis	0x06, 4	; 6
     9e0:	fe cf       	rjmp	.-4      	; 0x9de <M_AdcRead+0xc>
		/*WAIT FOR CONVERSION*/
		//_delay_ms(50);
	}
/*	adcL=ADCL;
	adcH=ADCH;*/
	value=ADCLVALUE;
     9e2:	84 b1       	in	r24, 0x04	; 4
     9e4:	95 b1       	in	r25, 0x05	; 5
	
	return value ;
     9e6:	08 95       	ret

000009e8 <M_PinMode>:
     9e8:	98 ed       	ldi	r25, 0xD8	; 216
     9ea:	98 0f       	add	r25, r24
     9ec:	99 30       	cpi	r25, 0x09	; 9
     9ee:	f8 f4       	brcc	.+62     	; 0xa2e <M_PinMode+0x46>
     9f0:	61 30       	cpi	r22, 0x01	; 1
     9f2:	69 f4       	brne	.+26     	; 0xa0e <M_PinMode+0x26>
     9f4:	4a b3       	in	r20, 0x1a	; 26
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	b9 01       	movw	r22, r18
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <M_PinMode+0x1a>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	9a 95       	dec	r25
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <M_PinMode+0x16>
     a06:	cb 01       	movw	r24, r22
     a08:	84 2b       	or	r24, r20
     a0a:	8a bb       	out	0x1a, r24	; 26
     a0c:	08 95       	ret
     a0e:	61 11       	cpse	r22, r1
     a10:	75 c0       	rjmp	.+234    	; 0xafc <M_PinMode+0x114>
     a12:	4a b3       	in	r20, 0x1a	; 26
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	b9 01       	movw	r22, r18
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <M_PinMode+0x38>
     a1c:	66 0f       	add	r22, r22
     a1e:	77 1f       	adc	r23, r23
     a20:	9a 95       	dec	r25
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <M_PinMode+0x34>
     a24:	cb 01       	movw	r24, r22
     a26:	80 95       	com	r24
     a28:	84 23       	and	r24, r20
     a2a:	8a bb       	out	0x1a, r24	; 26
     a2c:	08 95       	ret
     a2e:	92 ee       	ldi	r25, 0xE2	; 226
     a30:	98 0f       	add	r25, r24
     a32:	99 30       	cpi	r25, 0x09	; 9
     a34:	f8 f4       	brcc	.+62     	; 0xa74 <M_PinMode+0x8c>
     a36:	61 30       	cpi	r22, 0x01	; 1
     a38:	69 f4       	brne	.+26     	; 0xa54 <M_PinMode+0x6c>
     a3a:	47 b3       	in	r20, 0x17	; 23
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	b9 01       	movw	r22, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <M_PinMode+0x60>
     a44:	66 0f       	add	r22, r22
     a46:	77 1f       	adc	r23, r23
     a48:	9a 95       	dec	r25
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <M_PinMode+0x5c>
     a4c:	cb 01       	movw	r24, r22
     a4e:	84 2b       	or	r24, r20
     a50:	87 bb       	out	0x17, r24	; 23
     a52:	08 95       	ret
     a54:	61 11       	cpse	r22, r1
     a56:	52 c0       	rjmp	.+164    	; 0xafc <M_PinMode+0x114>
     a58:	47 b3       	in	r20, 0x17	; 23
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	b9 01       	movw	r22, r18
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <M_PinMode+0x7e>
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	9a 95       	dec	r25
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <M_PinMode+0x7a>
     a6a:	cb 01       	movw	r24, r22
     a6c:	80 95       	com	r24
     a6e:	84 23       	and	r24, r20
     a70:	87 bb       	out	0x17, r24	; 23
     a72:	08 95       	ret
     a74:	9c ee       	ldi	r25, 0xEC	; 236
     a76:	98 0f       	add	r25, r24
     a78:	99 30       	cpi	r25, 0x09	; 9
     a7a:	f8 f4       	brcc	.+62     	; 0xaba <M_PinMode+0xd2>
     a7c:	61 30       	cpi	r22, 0x01	; 1
     a7e:	69 f4       	brne	.+26     	; 0xa9a <M_PinMode+0xb2>
     a80:	44 b3       	in	r20, 0x14	; 20
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	b9 01       	movw	r22, r18
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <M_PinMode+0xa6>
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	9a 95       	dec	r25
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <M_PinMode+0xa2>
     a92:	cb 01       	movw	r24, r22
     a94:	84 2b       	or	r24, r20
     a96:	84 bb       	out	0x14, r24	; 20
     a98:	08 95       	ret
     a9a:	61 11       	cpse	r22, r1
     a9c:	2f c0       	rjmp	.+94     	; 0xafc <M_PinMode+0x114>
     a9e:	44 b3       	in	r20, 0x14	; 20
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	b9 01       	movw	r22, r18
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <M_PinMode+0xc4>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	9a 95       	dec	r25
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <M_PinMode+0xc0>
     ab0:	cb 01       	movw	r24, r22
     ab2:	80 95       	com	r24
     ab4:	84 23       	and	r24, r20
     ab6:	84 bb       	out	0x14, r24	; 20
     ab8:	08 95       	ret
     aba:	8a 50       	subi	r24, 0x0A	; 10
     abc:	89 30       	cpi	r24, 0x09	; 9
     abe:	f0 f4       	brcc	.+60     	; 0xafc <M_PinMode+0x114>
     ac0:	61 30       	cpi	r22, 0x01	; 1
     ac2:	69 f4       	brne	.+26     	; 0xade <M_PinMode+0xf6>
     ac4:	41 b3       	in	r20, 0x11	; 17
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	b9 01       	movw	r22, r18
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <M_PinMode+0xea>
     ace:	66 0f       	add	r22, r22
     ad0:	77 1f       	adc	r23, r23
     ad2:	8a 95       	dec	r24
     ad4:	e2 f7       	brpl	.-8      	; 0xace <M_PinMode+0xe6>
     ad6:	cb 01       	movw	r24, r22
     ad8:	84 2b       	or	r24, r20
     ada:	81 bb       	out	0x11, r24	; 17
     adc:	08 95       	ret
     ade:	61 11       	cpse	r22, r1
     ae0:	0d c0       	rjmp	.+26     	; 0xafc <M_PinMode+0x114>
     ae2:	41 b3       	in	r20, 0x11	; 17
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	b9 01       	movw	r22, r18
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <M_PinMode+0x108>
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	8a 95       	dec	r24
     af2:	e2 f7       	brpl	.-8      	; 0xaec <M_PinMode+0x104>
     af4:	cb 01       	movw	r24, r22
     af6:	80 95       	com	r24
     af8:	84 23       	and	r24, r20
     afa:	81 bb       	out	0x11, r24	; 17
     afc:	08 95       	ret

00000afe <M_PinWrite>:
     afe:	98 ed       	ldi	r25, 0xD8	; 216
     b00:	98 0f       	add	r25, r24
     b02:	99 30       	cpi	r25, 0x09	; 9
     b04:	f8 f4       	brcc	.+62     	; 0xb44 <M_PinWrite+0x46>
     b06:	61 30       	cpi	r22, 0x01	; 1
     b08:	69 f4       	brne	.+26     	; 0xb24 <M_PinWrite+0x26>
     b0a:	4b b3       	in	r20, 0x1b	; 27
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	b9 01       	movw	r22, r18
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <M_PinWrite+0x1a>
     b14:	66 0f       	add	r22, r22
     b16:	77 1f       	adc	r23, r23
     b18:	9a 95       	dec	r25
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <M_PinWrite+0x16>
     b1c:	cb 01       	movw	r24, r22
     b1e:	84 2b       	or	r24, r20
     b20:	8b bb       	out	0x1b, r24	; 27
     b22:	08 95       	ret
     b24:	61 11       	cpse	r22, r1
     b26:	75 c0       	rjmp	.+234    	; 0xc12 <M_PinWrite+0x114>
     b28:	4b b3       	in	r20, 0x1b	; 27
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	b9 01       	movw	r22, r18
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <M_PinWrite+0x38>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	9a 95       	dec	r25
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <M_PinWrite+0x34>
     b3a:	cb 01       	movw	r24, r22
     b3c:	80 95       	com	r24
     b3e:	84 23       	and	r24, r20
     b40:	8b bb       	out	0x1b, r24	; 27
     b42:	08 95       	ret
     b44:	92 ee       	ldi	r25, 0xE2	; 226
     b46:	98 0f       	add	r25, r24
     b48:	99 30       	cpi	r25, 0x09	; 9
     b4a:	f8 f4       	brcc	.+62     	; 0xb8a <M_PinWrite+0x8c>
     b4c:	61 30       	cpi	r22, 0x01	; 1
     b4e:	69 f4       	brne	.+26     	; 0xb6a <M_PinWrite+0x6c>
     b50:	48 b3       	in	r20, 0x18	; 24
     b52:	21 e0       	ldi	r18, 0x01	; 1
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	b9 01       	movw	r22, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <M_PinWrite+0x60>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	9a 95       	dec	r25
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <M_PinWrite+0x5c>
     b62:	cb 01       	movw	r24, r22
     b64:	84 2b       	or	r24, r20
     b66:	88 bb       	out	0x18, r24	; 24
     b68:	08 95       	ret
     b6a:	61 11       	cpse	r22, r1
     b6c:	52 c0       	rjmp	.+164    	; 0xc12 <M_PinWrite+0x114>
     b6e:	48 b3       	in	r20, 0x18	; 24
     b70:	21 e0       	ldi	r18, 0x01	; 1
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	b9 01       	movw	r22, r18
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <M_PinWrite+0x7e>
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	9a 95       	dec	r25
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <M_PinWrite+0x7a>
     b80:	cb 01       	movw	r24, r22
     b82:	80 95       	com	r24
     b84:	84 23       	and	r24, r20
     b86:	88 bb       	out	0x18, r24	; 24
     b88:	08 95       	ret
     b8a:	9c ee       	ldi	r25, 0xEC	; 236
     b8c:	98 0f       	add	r25, r24
     b8e:	99 30       	cpi	r25, 0x09	; 9
     b90:	f8 f4       	brcc	.+62     	; 0xbd0 <M_PinWrite+0xd2>
     b92:	61 30       	cpi	r22, 0x01	; 1
     b94:	69 f4       	brne	.+26     	; 0xbb0 <M_PinWrite+0xb2>
     b96:	45 b3       	in	r20, 0x15	; 21
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	b9 01       	movw	r22, r18
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <M_PinWrite+0xa6>
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	9a 95       	dec	r25
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <M_PinWrite+0xa2>
     ba8:	cb 01       	movw	r24, r22
     baa:	84 2b       	or	r24, r20
     bac:	85 bb       	out	0x15, r24	; 21
     bae:	08 95       	ret
     bb0:	61 11       	cpse	r22, r1
     bb2:	2f c0       	rjmp	.+94     	; 0xc12 <M_PinWrite+0x114>
     bb4:	45 b3       	in	r20, 0x15	; 21
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <M_PinWrite+0xc4>
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	9a 95       	dec	r25
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <M_PinWrite+0xc0>
     bc6:	cb 01       	movw	r24, r22
     bc8:	80 95       	com	r24
     bca:	84 23       	and	r24, r20
     bcc:	85 bb       	out	0x15, r24	; 21
     bce:	08 95       	ret
     bd0:	8a 50       	subi	r24, 0x0A	; 10
     bd2:	89 30       	cpi	r24, 0x09	; 9
     bd4:	f0 f4       	brcc	.+60     	; 0xc12 <M_PinWrite+0x114>
     bd6:	61 30       	cpi	r22, 0x01	; 1
     bd8:	69 f4       	brne	.+26     	; 0xbf4 <M_PinWrite+0xf6>
     bda:	42 b3       	in	r20, 0x12	; 18
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	b9 01       	movw	r22, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <M_PinWrite+0xea>
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	8a 95       	dec	r24
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <M_PinWrite+0xe6>
     bec:	cb 01       	movw	r24, r22
     bee:	84 2b       	or	r24, r20
     bf0:	82 bb       	out	0x12, r24	; 18
     bf2:	08 95       	ret
     bf4:	61 11       	cpse	r22, r1
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <M_PinWrite+0x114>
     bf8:	42 b3       	in	r20, 0x12	; 18
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	b9 01       	movw	r22, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <M_PinWrite+0x108>
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	8a 95       	dec	r24
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <M_PinWrite+0x104>
     c0a:	cb 01       	movw	r24, r22
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	82 bb       	out	0x12, r24	; 18
     c12:	08 95       	ret

00000c14 <M_PinRead>:
     c14:	28 ed       	ldi	r18, 0xD8	; 216
     c16:	28 0f       	add	r18, r24
     c18:	29 30       	cpi	r18, 0x09	; 9
     c1a:	48 f4       	brcc	.+18     	; 0xc2e <M_PinRead+0x1a>
     c1c:	89 b3       	in	r24, 0x19	; 25
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <M_PinRead+0x12>
     c22:	95 95       	asr	r25
     c24:	87 95       	ror	r24
     c26:	2a 95       	dec	r18
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <M_PinRead+0xe>
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	08 95       	ret
     c2e:	22 ee       	ldi	r18, 0xE2	; 226
     c30:	28 0f       	add	r18, r24
     c32:	29 30       	cpi	r18, 0x09	; 9
     c34:	48 f4       	brcc	.+18     	; 0xc48 <M_PinRead+0x34>
     c36:	86 b3       	in	r24, 0x16	; 22
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <M_PinRead+0x2c>
     c3c:	95 95       	asr	r25
     c3e:	87 95       	ror	r24
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <M_PinRead+0x28>
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	08 95       	ret
     c48:	2c ee       	ldi	r18, 0xEC	; 236
     c4a:	28 0f       	add	r18, r24
     c4c:	29 30       	cpi	r18, 0x09	; 9
     c4e:	48 f4       	brcc	.+18     	; 0xc62 <M_PinRead+0x4e>
     c50:	83 b3       	in	r24, 0x13	; 19
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <M_PinRead+0x46>
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	2a 95       	dec	r18
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <M_PinRead+0x42>
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	08 95       	ret
     c62:	26 ef       	ldi	r18, 0xF6	; 246
     c64:	28 0f       	add	r18, r24
     c66:	29 30       	cpi	r18, 0x09	; 9
     c68:	50 f4       	brcc	.+20     	; 0xc7e <M_PinRead+0x6a>
     c6a:	90 b3       	in	r25, 0x10	; 16
     c6c:	89 2f       	mov	r24, r25
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <M_PinRead+0x62>
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	2a 95       	dec	r18
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <M_PinRead+0x5e>
     c7a:	81 70       	andi	r24, 0x01	; 1
     c7c:	08 95       	ret
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret

00000c82 <M_I2cMasterInit>:
		}
		/*Clear the bit of start condition*/
		//Data_received=TWDR;
		
		//SET_BIT(TWCR,5);
}
     c82:	08 98       	cbi	0x01, 0	; 1
     c84:	09 98       	cbi	0x01, 1	; 1
     c86:	88 e4       	ldi	r24, 0x48	; 72
     c88:	80 b9       	out	0x00, r24	; 0
     c8a:	86 b7       	in	r24, 0x36	; 54
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	86 bf       	out	0x36, r24	; 54
     c90:	2f ef       	ldi	r18, 0xFF	; 255
     c92:	81 ee       	ldi	r24, 0xE1	; 225
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	21 50       	subi	r18, 0x01	; 1
     c98:	80 40       	sbci	r24, 0x00	; 0
     c9a:	90 40       	sbci	r25, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <M_I2cMasterInit+0x14>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <M_I2cMasterInit+0x1e>
     ca0:	00 00       	nop
     ca2:	08 95       	ret

00000ca4 <M_I2cStartCondition>:
     ca4:	86 b7       	in	r24, 0x36	; 54
     ca6:	80 68       	ori	r24, 0x80	; 128
     ca8:	86 bf       	out	0x36, r24	; 54
     caa:	86 b7       	in	r24, 0x36	; 54
     cac:	80 62       	ori	r24, 0x20	; 32
     cae:	86 bf       	out	0x36, r24	; 54
     cb0:	86 b7       	in	r24, 0x36	; 54
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	86 bf       	out	0x36, r24	; 54
     cb6:	06 b6       	in	r0, 0x36	; 54
     cb8:	07 fe       	sbrs	r0, 7
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <M_I2cStartCondition+0x12>
     cbc:	81 b1       	in	r24, 0x01	; 1
     cbe:	88 7f       	andi	r24, 0xF8	; 248
     cc0:	88 30       	cpi	r24, 0x08	; 8
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <M_I2cStartCondition+0x18>
     cc4:	2f ef       	ldi	r18, 0xFF	; 255
     cc6:	81 ee       	ldi	r24, 0xE1	; 225
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	21 50       	subi	r18, 0x01	; 1
     ccc:	80 40       	sbci	r24, 0x00	; 0
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <M_I2cStartCondition+0x26>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <M_I2cStartCondition+0x30>
     cd4:	00 00       	nop
     cd6:	08 95       	ret

00000cd8 <M_I2cStopCondition>:
     cd8:	86 b7       	in	r24, 0x36	; 54
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	86 bf       	out	0x36, r24	; 54
     cde:	86 b7       	in	r24, 0x36	; 54
     ce0:	8f 7d       	andi	r24, 0xDF	; 223
     ce2:	86 bf       	out	0x36, r24	; 54
     ce4:	86 b7       	in	r24, 0x36	; 54
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	86 bf       	out	0x36, r24	; 54
     cea:	08 95       	ret

00000cec <M_I2cSendSlaveAddress_Write>:
     cec:	88 0f       	add	r24, r24
     cee:	83 b9       	out	0x03, r24	; 3
     cf0:	86 b7       	in	r24, 0x36	; 54
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	86 bf       	out	0x36, r24	; 54
     cf6:	86 b7       	in	r24, 0x36	; 54
     cf8:	8f 7d       	andi	r24, 0xDF	; 223
     cfa:	86 bf       	out	0x36, r24	; 54
     cfc:	86 b7       	in	r24, 0x36	; 54
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	86 bf       	out	0x36, r24	; 54
     d02:	06 b6       	in	r0, 0x36	; 54
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <M_I2cSendSlaveAddress_Write+0x16>
     d08:	81 b1       	in	r24, 0x01	; 1
     d0a:	88 7f       	andi	r24, 0xF8	; 248
     d0c:	88 31       	cpi	r24, 0x18	; 24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <M_I2cSendSlaveAddress_Write+0x1c>
     d10:	2f ef       	ldi	r18, 0xFF	; 255
     d12:	81 ee       	ldi	r24, 0xE1	; 225
     d14:	94 e0       	ldi	r25, 0x04	; 4
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	80 40       	sbci	r24, 0x00	; 0
     d1a:	90 40       	sbci	r25, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <M_I2cSendSlaveAddress_Write+0x2a>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <M_I2cSendSlaveAddress_Write+0x34>
     d20:	00 00       	nop
     d22:	08 95       	ret

00000d24 <M_I2cSendSlaveAddress_Read>:
     d24:	88 0f       	add	r24, r24
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	83 b9       	out	0x03, r24	; 3
     d2a:	86 b7       	in	r24, 0x36	; 54
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	86 bf       	out	0x36, r24	; 54
     d30:	86 b7       	in	r24, 0x36	; 54
     d32:	80 68       	ori	r24, 0x80	; 128
     d34:	86 bf       	out	0x36, r24	; 54
     d36:	86 b7       	in	r24, 0x36	; 54
     d38:	8f 7d       	andi	r24, 0xDF	; 223
     d3a:	86 bf       	out	0x36, r24	; 54
     d3c:	06 b6       	in	r0, 0x36	; 54
     d3e:	07 fe       	sbrs	r0, 7
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <M_I2cSendSlaveAddress_Read+0x18>
     d42:	81 b1       	in	r24, 0x01	; 1
     d44:	88 7f       	andi	r24, 0xF8	; 248
     d46:	80 34       	cpi	r24, 0x40	; 64
     d48:	e1 f7       	brne	.-8      	; 0xd42 <M_I2cSendSlaveAddress_Read+0x1e>
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	81 ee       	ldi	r24, 0xE1	; 225
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <M_I2cSendSlaveAddress_Read+0x2c>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <M_I2cSendSlaveAddress_Read+0x36>
     d5a:	00 00       	nop
     d5c:	08 95       	ret

00000d5e <M_I2cMasterSend_Data>:
     d5e:	83 b9       	out	0x03, r24	; 3
     d60:	86 b7       	in	r24, 0x36	; 54
     d62:	8f 7e       	andi	r24, 0xEF	; 239
     d64:	86 bf       	out	0x36, r24	; 54
     d66:	86 b7       	in	r24, 0x36	; 54
     d68:	8f 7d       	andi	r24, 0xDF	; 223
     d6a:	86 bf       	out	0x36, r24	; 54
     d6c:	86 b7       	in	r24, 0x36	; 54
     d6e:	80 68       	ori	r24, 0x80	; 128
     d70:	86 bf       	out	0x36, r24	; 54
     d72:	06 b6       	in	r0, 0x36	; 54
     d74:	07 fe       	sbrs	r0, 7
     d76:	fd cf       	rjmp	.-6      	; 0xd72 <M_I2cMasterSend_Data+0x14>
     d78:	81 b1       	in	r24, 0x01	; 1
     d7a:	88 7f       	andi	r24, 0xF8	; 248
     d7c:	88 32       	cpi	r24, 0x28	; 40
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <M_I2cMasterSend_Data+0x1a>
     d80:	08 95       	ret

00000d82 <M_I2cMasterReceive_Data>:
     d82:	86 b7       	in	r24, 0x36	; 54
     d84:	8f 7d       	andi	r24, 0xDF	; 223
     d86:	86 bf       	out	0x36, r24	; 54
     d88:	86 b7       	in	r24, 0x36	; 54
     d8a:	8f 7e       	andi	r24, 0xEF	; 239
     d8c:	86 bf       	out	0x36, r24	; 54
     d8e:	86 b7       	in	r24, 0x36	; 54
     d90:	80 68       	ori	r24, 0x80	; 128
     d92:	86 bf       	out	0x36, r24	; 54
     d94:	06 b6       	in	r0, 0x36	; 54
     d96:	07 fe       	sbrs	r0, 7
     d98:	fd cf       	rjmp	.-6      	; 0xd94 <M_I2cMasterReceive_Data+0x12>
     d9a:	81 b1       	in	r24, 0x01	; 1
     d9c:	88 7f       	andi	r24, 0xF8	; 248
     d9e:	88 35       	cpi	r24, 0x58	; 88
     da0:	e1 f7       	brne	.-8      	; 0xd9a <M_I2cMasterReceive_Data+0x18>
     da2:	83 b1       	in	r24, 0x03	; 3
     da4:	08 95       	ret

00000da6 <M_I2cRepeatedStCondition>:
void M_I2cRepeatedStCondition(void){
	
	SET_BIT(TWCR,5);//مهم جدا تكون الاول 
     da6:	86 b7       	in	r24, 0x36	; 54
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	86 bf       	out	0x36, r24	; 54
		/*clear the bit of Stop condition*/
	CLR_BIT(TWCR,4);
     dac:	86 b7       	in	r24, 0x36	; 54
     dae:	8f 7e       	andi	r24, 0xEF	; 239
     db0:	86 bf       	out	0x36, r24	; 54
	/*clear the interrupt flag */
	SET_BIT(TWCR,7);
     db2:	86 b7       	in	r24, 0x36	; 54
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	86 bf       	out	0x36, r24	; 54
	

    while((GET_BIT(TWCR,7))!=1){
     db8:	06 b6       	in	r0, 0x36	; 54
     dba:	07 fe       	sbrs	r0, 7
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <M_I2cRepeatedStCondition+0x12>
    }
 
	/*Address has been received ACK has been returned*/
	while((TWSR&0xF8)!=(0x10)){
     dbe:	81 b1       	in	r24, 0x01	; 1
     dc0:	88 7f       	andi	r24, 0xF8	; 248
     dc2:	80 31       	cpi	r24, 0x10	; 16
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <M_I2cRepeatedStCondition+0x18>
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	81 ee       	ldi	r24, 0xE1	; 225
     dca:	94 e0       	ldi	r25, 0x04	; 4
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	80 40       	sbci	r24, 0x00	; 0
     dd0:	90 40       	sbci	r25, 0x00	; 0
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <M_I2cRepeatedStCondition+0x26>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <M_I2cRepeatedStCondition+0x30>
     dd6:	00 00       	nop
     dd8:	08 95       	ret

00000dda <PWM_1_INIT>:
     dda:	8f b5       	in	r24, 0x2f	; 47
     ddc:	8e 7f       	andi	r24, 0xFE	; 254
     dde:	8f bd       	out	0x2f, r24	; 47
     de0:	8f b5       	in	r24, 0x2f	; 47
     de2:	82 60       	ori	r24, 0x02	; 2
     de4:	8f bd       	out	0x2f, r24	; 47
     de6:	8e b5       	in	r24, 0x2e	; 46
     de8:	88 60       	ori	r24, 0x08	; 8
     dea:	8e bd       	out	0x2e, r24	; 46
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	80 61       	ori	r24, 0x10	; 16
     df0:	8e bd       	out	0x2e, r24	; 46
     df2:	8f b5       	in	r24, 0x2f	; 47
     df4:	80 68       	ori	r24, 0x80	; 128
     df6:	8f bd       	out	0x2f, r24	; 47
     df8:	82 ee       	ldi	r24, 0xE2	; 226
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	97 bd       	out	0x27, r25	; 39
     dfe:	86 bd       	out	0x26, r24	; 38
     e00:	08 95       	ret

00000e02 <PWM_1_SET_DUTY_CYCLE>:
     e02:	22 ee       	ldi	r18, 0xE2	; 226
     e04:	34 e0       	ldi	r19, 0x04	; 4
     e06:	48 2f       	mov	r20, r24
     e08:	42 9f       	mul	r20, r18
     e0a:	c0 01       	movw	r24, r0
     e0c:	43 9f       	mul	r20, r19
     e0e:	90 0d       	add	r25, r0
     e10:	11 24       	eor	r1, r1
     e12:	64 e6       	ldi	r22, 0x64	; 100
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	0e 94 5f 09 	call	0x12be	; 0x12be <__divmodhi4>
     e1a:	61 50       	subi	r22, 0x01	; 1
     e1c:	71 09       	sbc	r23, r1
     e1e:	7b bd       	out	0x2b, r23	; 43
     e20:	6a bd       	out	0x2a, r22	; 42
     e22:	08 95       	ret

00000e24 <PWM_1_START>:
     e24:	8e b5       	in	r24, 0x2e	; 46
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	8e bd       	out	0x2e, r24	; 46
     e2a:	8e b5       	in	r24, 0x2e	; 46
     e2c:	8d 7f       	andi	r24, 0xFD	; 253
     e2e:	8e bd       	out	0x2e, r24	; 46
     e30:	8e b5       	in	r24, 0x2e	; 46
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8e bd       	out	0x2e, r24	; 46
     e36:	08 95       	ret

00000e38 <M_UsarIntInit>:
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	8b e0       	ldi	r24, 0x0B	; 11
     e3c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8a e0       	ldi	r24, 0x0A	; 10
     e44:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <M_PinMode>
     e48:	86 e8       	ldi	r24, 0x86	; 134
     e4a:	80 bd       	out	0x20, r24	; 32
     e4c:	52 98       	cbi	0x0a, 2	; 10
     e4e:	87 e6       	ldi	r24, 0x67	; 103
     e50:	89 b9       	out	0x09, r24	; 9
     e52:	54 9a       	sbi	0x0a, 4	; 10
     e54:	53 9a       	sbi	0x0a, 3	; 10
     e56:	57 9a       	sbi	0x0a, 7	; 10
     e58:	56 9a       	sbi	0x0a, 6	; 10
     e5a:	8f b7       	in	r24, 0x3f	; 63
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	8f bf       	out	0x3f, r24	; 63
     e60:	08 95       	ret

00000e62 <M_UsartTransmit>:
     e62:	5d 9b       	sbis	0x0b, 5	; 11
     e64:	fe cf       	rjmp	.-4      	; 0xe62 <M_UsartTransmit>
     e66:	8c b9       	out	0x0c, r24	; 12
     e68:	08 95       	ret

00000e6a <M_UsartSendString>:
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	88 23       	and	r24, r24
     e76:	59 f0       	breq	.+22     	; 0xe8e <M_UsartSendString+0x24>
     e78:	8f 01       	movw	r16, r30
     e7a:	c0 e0       	ldi	r28, 0x00	; 0
     e7c:	0e 94 31 07 	call	0xe62	; 0xe62 <M_UsartTransmit>
     e80:	cf 5f       	subi	r28, 0xFF	; 255
     e82:	f8 01       	movw	r30, r16
     e84:	ec 0f       	add	r30, r28
     e86:	f1 1d       	adc	r31, r1
     e88:	80 81       	ld	r24, Z
     e8a:	81 11       	cpse	r24, r1
     e8c:	f7 cf       	rjmp	.-18     	; 0xe7c <M_UsartSendString+0x12>
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     e96:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
     e9a:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
     e9e:	80 81       	ld	r24, Z
     ea0:	81 11       	cpse	r24, r1
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <prvResetNextTaskUnblockTime+0x1c>
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	9f ef       	ldi	r25, 0xFF	; 255
     ea8:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <xNextTaskUnblockTime+0x1>
     eac:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <xNextTaskUnblockTime>
     eb0:	08 95       	ret
     eb2:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
     eb6:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
     eba:	05 80       	ldd	r0, Z+5	; 0x05
     ebc:	f6 81       	ldd	r31, Z+6	; 0x06
     ebe:	e0 2d       	mov	r30, r0
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <xNextTaskUnblockTime+0x1>
     ec8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <xNextTaskUnblockTime>
     ecc:	08 95       	ret

00000ece <xTaskIncrementTick>:
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <uxSchedulerSuspended>
     ede:	81 11       	cpse	r24, r1
     ee0:	04 c1       	rjmp	.+520    	; 0x10ea <xTaskIncrementTick+0x21c>
     ee2:	c0 91 37 04 	lds	r28, 0x0437	; 0x800437 <xTickCount>
     ee6:	d0 91 38 04 	lds	r29, 0x0438	; 0x800438 <xTickCount+0x1>
     eea:	7e 01       	movw	r14, r28
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	e8 1a       	sub	r14, r24
     ef0:	f8 0a       	sbc	r15, r24
     ef2:	f0 92 38 04 	sts	0x0438, r15	; 0x800438 <xTickCount+0x1>
     ef6:	e0 92 37 04 	sts	0x0437, r14	; 0x800437 <xTickCount>
     efa:	e1 14       	cp	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	b9 f4       	brne	.+46     	; 0xf2e <xTaskIncrementTick+0x60>
     f00:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <pxDelayedTaskList>
     f04:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
     f08:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <pxOverflowDelayedTaskList>
     f0c:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <pxOverflowDelayedTaskList+0x1>
     f10:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <pxDelayedTaskList+0x1>
     f14:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <pxDelayedTaskList>
     f18:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <pxOverflowDelayedTaskList+0x1>
     f1c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <pxOverflowDelayedTaskList>
     f20:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <xNumOfOverflows>
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <xNumOfOverflows>
     f2a:	0e 94 4b 07 	call	0xe96	; 0xe96 <prvResetNextTaskUnblockTime>
     f2e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <xNextTaskUnblockTime>
     f32:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <xNextTaskUnblockTime+0x1>
     f36:	e8 16       	cp	r14, r24
     f38:	f9 06       	cpc	r15, r25
     f3a:	10 f4       	brcc	.+4      	; 0xf40 <xTaskIncrementTick+0x72>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	b9 c0       	rjmp	.+370    	; 0x10b2 <xTaskIncrementTick+0x1e4>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
     f48:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
     f4c:	90 81       	ld	r25, Z
     f4e:	91 11       	cpse	r25, r1
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <xTaskIncrementTick+0x92>
     f52:	2f ef       	ldi	r18, 0xFF	; 255
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	30 93 31 04 	sts	0x0431, r19	; 0x800431 <xNextTaskUnblockTime+0x1>
     f5a:	20 93 30 04 	sts	0x0430, r18	; 0x800430 <xNextTaskUnblockTime>
     f5e:	a9 c0       	rjmp	.+338    	; 0x10b2 <xTaskIncrementTick+0x1e4>
     f60:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <pxDelayedTaskList>
     f64:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <pxDelayedTaskList+0x1>
     f68:	05 80       	ldd	r0, Z+5	; 0x05
     f6a:	f6 81       	ldd	r31, Z+6	; 0x06
     f6c:	e0 2d       	mov	r30, r0
     f6e:	06 80       	ldd	r0, Z+6	; 0x06
     f70:	f7 81       	ldd	r31, Z+7	; 0x07
     f72:	e0 2d       	mov	r30, r0
     f74:	22 81       	ldd	r18, Z+2	; 0x02
     f76:	33 81       	ldd	r19, Z+3	; 0x03
     f78:	e2 16       	cp	r14, r18
     f7a:	f3 06       	cpc	r15, r19
     f7c:	28 f4       	brcc	.+10     	; 0xf88 <xTaskIncrementTick+0xba>
     f7e:	30 93 31 04 	sts	0x0431, r19	; 0x800431 <xNextTaskUnblockTime+0x1>
     f82:	20 93 30 04 	sts	0x0430, r18	; 0x800430 <xNextTaskUnblockTime>
     f86:	95 c0       	rjmp	.+298    	; 0x10b2 <xTaskIncrementTick+0x1e4>
     f88:	a2 85       	ldd	r26, Z+10	; 0x0a
     f8a:	b3 85       	ldd	r27, Z+11	; 0x0b
     f8c:	24 81       	ldd	r18, Z+4	; 0x04
     f8e:	35 81       	ldd	r19, Z+5	; 0x05
     f90:	46 81       	ldd	r20, Z+6	; 0x06
     f92:	57 81       	ldd	r21, Z+7	; 0x07
     f94:	e9 01       	movw	r28, r18
     f96:	5d 83       	std	Y+5, r21	; 0x05
     f98:	4c 83       	std	Y+4, r20	; 0x04
     f9a:	26 81       	ldd	r18, Z+6	; 0x06
     f9c:	37 81       	ldd	r19, Z+7	; 0x07
     f9e:	44 81       	ldd	r20, Z+4	; 0x04
     fa0:	55 81       	ldd	r21, Z+5	; 0x05
     fa2:	e9 01       	movw	r28, r18
     fa4:	5b 83       	std	Y+3, r21	; 0x03
     fa6:	4a 83       	std	Y+2, r20	; 0x02
     fa8:	af 01       	movw	r20, r30
     faa:	4e 5f       	subi	r20, 0xFE	; 254
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	2d 91       	ld	r18, X+
     fb2:	3c 91       	ld	r19, X
     fb4:	12 97       	sbiw	r26, 0x02	; 2
     fb6:	24 17       	cp	r18, r20
     fb8:	35 07       	cpc	r19, r21
     fba:	31 f4       	brne	.+12     	; 0xfc8 <xTaskIncrementTick+0xfa>
     fbc:	26 81       	ldd	r18, Z+6	; 0x06
     fbe:	37 81       	ldd	r19, Z+7	; 0x07
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	3c 93       	st	X, r19
     fc4:	2e 93       	st	-X, r18
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	13 86       	std	Z+11, r1	; 0x0b
     fca:	12 86       	std	Z+10, r1	; 0x0a
     fcc:	9c 91       	ld	r25, X
     fce:	91 50       	subi	r25, 0x01	; 1
     fd0:	9c 93       	st	X, r25
     fd2:	a4 89       	ldd	r26, Z+20	; 0x14
     fd4:	b5 89       	ldd	r27, Z+21	; 0x15
     fd6:	10 97       	sbiw	r26, 0x00	; 0
     fd8:	19 f1       	breq	.+70     	; 0x1020 <xTaskIncrementTick+0x152>
     fda:	26 85       	ldd	r18, Z+14	; 0x0e
     fdc:	37 85       	ldd	r19, Z+15	; 0x0f
     fde:	00 89       	ldd	r16, Z+16	; 0x10
     fe0:	11 89       	ldd	r17, Z+17	; 0x11
     fe2:	e9 01       	movw	r28, r18
     fe4:	1d 83       	std	Y+5, r17	; 0x05
     fe6:	0c 83       	std	Y+4, r16	; 0x04
     fe8:	20 89       	ldd	r18, Z+16	; 0x10
     fea:	31 89       	ldd	r19, Z+17	; 0x11
     fec:	06 85       	ldd	r16, Z+14	; 0x0e
     fee:	17 85       	ldd	r17, Z+15	; 0x0f
     ff0:	e9 01       	movw	r28, r18
     ff2:	1b 83       	std	Y+3, r17	; 0x03
     ff4:	0a 83       	std	Y+2, r16	; 0x02
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	0d 91       	ld	r16, X+
     ffa:	1c 91       	ld	r17, X
     ffc:	12 97       	sbiw	r26, 0x02	; 2
     ffe:	9f 01       	movw	r18, r30
    1000:	24 5f       	subi	r18, 0xF4	; 244
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	02 17       	cp	r16, r18
    1006:	13 07       	cpc	r17, r19
    1008:	31 f4       	brne	.+12     	; 0x1016 <xTaskIncrementTick+0x148>
    100a:	20 89       	ldd	r18, Z+16	; 0x10
    100c:	31 89       	ldd	r19, Z+17	; 0x11
    100e:	12 96       	adiw	r26, 0x02	; 2
    1010:	3c 93       	st	X, r19
    1012:	2e 93       	st	-X, r18
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	15 8a       	std	Z+21, r1	; 0x15
    1018:	14 8a       	std	Z+20, r1	; 0x14
    101a:	9c 91       	ld	r25, X
    101c:	91 50       	subi	r25, 0x01	; 1
    101e:	9c 93       	st	X, r25
    1020:	26 89       	ldd	r18, Z+22	; 0x16
    1022:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <uxTopReadyPriority>
    1026:	92 17       	cp	r25, r18
    1028:	10 f4       	brcc	.+4      	; 0x102e <xTaskIncrementTick+0x160>
    102a:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <uxTopReadyPriority>
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	d9 01       	movw	r26, r18
    1032:	aa 0f       	add	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	aa 0f       	add	r26, r26
    1038:	bb 1f       	adc	r27, r27
    103a:	aa 0f       	add	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	2a 0f       	add	r18, r26
    1040:	3b 1f       	adc	r19, r27
    1042:	d9 01       	movw	r26, r18
    1044:	a3 5c       	subi	r26, 0xC3	; 195
    1046:	bb 4f       	sbci	r27, 0xFB	; 251
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	0d 90       	ld	r0, X+
    104c:	bc 91       	ld	r27, X
    104e:	a0 2d       	mov	r26, r0
    1050:	b5 83       	std	Z+5, r27	; 0x05
    1052:	a4 83       	std	Z+4, r26	; 0x04
    1054:	14 96       	adiw	r26, 0x04	; 4
    1056:	2d 91       	ld	r18, X+
    1058:	3c 91       	ld	r19, X
    105a:	15 97       	sbiw	r26, 0x05	; 5
    105c:	37 83       	std	Z+7, r19	; 0x07
    105e:	26 83       	std	Z+6, r18	; 0x06
    1060:	14 96       	adiw	r26, 0x04	; 4
    1062:	2d 91       	ld	r18, X+
    1064:	3c 91       	ld	r19, X
    1066:	15 97       	sbiw	r26, 0x05	; 5
    1068:	e9 01       	movw	r28, r18
    106a:	5b 83       	std	Y+3, r21	; 0x03
    106c:	4a 83       	std	Y+2, r20	; 0x02
    106e:	15 96       	adiw	r26, 0x05	; 5
    1070:	5c 93       	st	X, r21
    1072:	4e 93       	st	-X, r20
    1074:	14 97       	sbiw	r26, 0x04	; 4
    1076:	a6 89       	ldd	r26, Z+22	; 0x16
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	9d 01       	movw	r18, r26
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	a2 0f       	add	r26, r18
    108a:	b3 1f       	adc	r27, r19
    108c:	a3 5c       	subi	r26, 0xC3	; 195
    108e:	bb 4f       	sbci	r27, 0xFB	; 251
    1090:	b3 87       	std	Z+11, r27	; 0x0b
    1092:	a2 87       	std	Z+10, r26	; 0x0a
    1094:	9c 91       	ld	r25, X
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	9c 93       	st	X, r25
    109a:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <pxCurrentTCB>
    109e:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <pxCurrentTCB+0x1>
    10a2:	26 89       	ldd	r18, Z+22	; 0x16
    10a4:	56 96       	adiw	r26, 0x16	; 22
    10a6:	9c 91       	ld	r25, X
    10a8:	29 17       	cp	r18, r25
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <xTaskIncrementTick+0x1e0>
    10ac:	4b cf       	rjmp	.-362    	; 0xf44 <xTaskIncrementTick+0x76>
    10ae:	86 2f       	mov	r24, r22
    10b0:	49 cf       	rjmp	.-366    	; 0xf44 <xTaskIncrementTick+0x76>
    10b2:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <pxCurrentTCB>
    10b6:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <pxCurrentTCB+0x1>
    10ba:	26 89       	ldd	r18, Z+22	; 0x16
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	f9 01       	movw	r30, r18
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	2e 0f       	add	r18, r30
    10ce:	3f 1f       	adc	r19, r31
    10d0:	f9 01       	movw	r30, r18
    10d2:	e3 5c       	subi	r30, 0xC3	; 195
    10d4:	fb 4f       	sbci	r31, 0xFB	; 251
    10d6:	90 81       	ld	r25, Z
    10d8:	92 30       	cpi	r25, 0x02	; 2
    10da:	08 f0       	brcs	.+2      	; 0x10de <xTaskIncrementTick+0x210>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <xYieldPending>
    10e2:	99 23       	and	r25, r25
    10e4:	61 f0       	breq	.+24     	; 0x10fe <xTaskIncrementTick+0x230>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <xTaskIncrementTick+0x230>
    10ea:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <xPendedTicks>
    10ee:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <xPendedTicks+0x1>
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <xPendedTicks+0x1>
    10f8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <xPendedTicks>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	08 95       	ret

0000110c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    110c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <uxSchedulerSuspended>
    1110:	88 23       	and	r24, r24
    1112:	21 f0       	breq	.+8      	; 0x111c <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <xYieldPending>
    111a:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    111c:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1120:	20 91 36 04 	lds	r18, 0x0436	; 0x800436 <uxTopReadyPriority>
    1124:	82 2f       	mov	r24, r18
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	fc 01       	movw	r30, r24
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ee 0f       	add	r30, r30
    1130:	ff 1f       	adc	r31, r31
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e8 0f       	add	r30, r24
    1138:	f9 1f       	adc	r31, r25
    113a:	e3 5c       	subi	r30, 0xC3	; 195
    113c:	fb 4f       	sbci	r31, 0xFB	; 251
    113e:	30 81       	ld	r19, Z
    1140:	31 11       	cpse	r19, r1
    1142:	11 c0       	rjmp	.+34     	; 0x1166 <vTaskSwitchContext+0x5a>
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	82 2f       	mov	r24, r18
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	fc 01       	movw	r30, r24
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	e3 5c       	subi	r30, 0xC3	; 195
    115e:	fb 4f       	sbci	r31, 0xFB	; 251
    1160:	30 81       	ld	r19, Z
    1162:	33 23       	and	r19, r19
    1164:	79 f3       	breq	.-34     	; 0x1144 <vTaskSwitchContext+0x38>
    1166:	ac 01       	movw	r20, r24
    1168:	44 0f       	add	r20, r20
    116a:	55 1f       	adc	r21, r21
    116c:	44 0f       	add	r20, r20
    116e:	55 1f       	adc	r21, r21
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	48 0f       	add	r20, r24
    1176:	59 1f       	adc	r21, r25
    1178:	da 01       	movw	r26, r20
    117a:	a3 5c       	subi	r26, 0xC3	; 195
    117c:	bb 4f       	sbci	r27, 0xFB	; 251
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	ed 91       	ld	r30, X+
    1182:	fc 91       	ld	r31, X
    1184:	12 97       	sbiw	r26, 0x02	; 2
    1186:	02 80       	ldd	r0, Z+2	; 0x02
    1188:	f3 81       	ldd	r31, Z+3	; 0x03
    118a:	e0 2d       	mov	r30, r0
    118c:	12 96       	adiw	r26, 0x02	; 2
    118e:	fc 93       	st	X, r31
    1190:	ee 93       	st	-X, r30
    1192:	11 97       	sbiw	r26, 0x01	; 1
    1194:	40 5c       	subi	r20, 0xC0	; 192
    1196:	5b 4f       	sbci	r21, 0xFB	; 251
    1198:	e4 17       	cp	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	29 f4       	brne	.+10     	; 0x11a8 <vTaskSwitchContext+0x9c>
    119e:	42 81       	ldd	r20, Z+2	; 0x02
    11a0:	53 81       	ldd	r21, Z+3	; 0x03
    11a2:	fd 01       	movw	r30, r26
    11a4:	52 83       	std	Z+2, r21	; 0x02
    11a6:	41 83       	std	Z+1, r20	; 0x01
    11a8:	fc 01       	movw	r30, r24
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	8e 0f       	add	r24, r30
    11b8:	9f 1f       	adc	r25, r31
    11ba:	fc 01       	movw	r30, r24
    11bc:	e3 5c       	subi	r30, 0xC3	; 195
    11be:	fb 4f       	sbci	r31, 0xFB	; 251
    11c0:	01 80       	ldd	r0, Z+1	; 0x01
    11c2:	f2 81       	ldd	r31, Z+2	; 0x02
    11c4:	e0 2d       	mov	r30, r0
    11c6:	86 81       	ldd	r24, Z+6	; 0x06
    11c8:	97 81       	ldd	r25, Z+7	; 0x07
    11ca:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <pxCurrentTCB+0x1>
    11ce:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <pxCurrentTCB>
    11d2:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <uxTopReadyPriority>
    11d6:	08 95       	ret

000011d8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	1f 92       	push	r1
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	2f 93       	push	r18
    1206:	3f 93       	push	r19
    1208:	4f 93       	push	r20
    120a:	5f 93       	push	r21
    120c:	6f 93       	push	r22
    120e:	7f 93       	push	r23
    1210:	8f 93       	push	r24
    1212:	9f 93       	push	r25
    1214:	af 93       	push	r26
    1216:	bf 93       	push	r27
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <pxCurrentTCB>
    1224:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <pxCurrentTCB+0x1>
    1228:	0d b6       	in	r0, 0x3d	; 61
    122a:	0d 92       	st	X+, r0
    122c:	0e b6       	in	r0, 0x3e	; 62
    122e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1230:	0e 94 67 07 	call	0xece	; 0xece <xTaskIncrementTick>
    1234:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1236:	0e 94 86 08 	call	0x110c	; 0x110c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    123a:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <pxCurrentTCB>
    123e:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <pxCurrentTCB+0x1>
    1242:	cd 91       	ld	r28, X+
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	dd 91       	ld	r29, X+
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	7f 90       	pop	r7
    127c:	6f 90       	pop	r6
    127e:	5f 90       	pop	r5
    1280:	4f 90       	pop	r4
    1282:	3f 90       	pop	r3
    1284:	2f 90       	pop	r2
    1286:	1f 90       	pop	r1
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    128e:	08 95       	ret

00001290 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1290:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1294:	18 95       	reti

00001296 <__udivmodhi4>:
    1296:	aa 1b       	sub	r26, r26
    1298:	bb 1b       	sub	r27, r27
    129a:	51 e1       	ldi	r21, 0x11	; 17
    129c:	07 c0       	rjmp	.+14     	; 0x12ac <__udivmodhi4_ep>

0000129e <__udivmodhi4_loop>:
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	a6 17       	cp	r26, r22
    12a4:	b7 07       	cpc	r27, r23
    12a6:	10 f0       	brcs	.+4      	; 0x12ac <__udivmodhi4_ep>
    12a8:	a6 1b       	sub	r26, r22
    12aa:	b7 0b       	sbc	r27, r23

000012ac <__udivmodhi4_ep>:
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	5a 95       	dec	r21
    12b2:	a9 f7       	brne	.-22     	; 0x129e <__udivmodhi4_loop>
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	08 95       	ret

000012be <__divmodhi4>:
    12be:	97 fb       	bst	r25, 7
    12c0:	07 2e       	mov	r0, r23
    12c2:	16 f4       	brtc	.+4      	; 0x12c8 <__divmodhi4+0xa>
    12c4:	00 94       	com	r0
    12c6:	07 d0       	rcall	.+14     	; 0x12d6 <__divmodhi4_neg1>
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	09 d0       	rcall	.+18     	; 0x12de <__divmodhi4_neg2>
    12cc:	0e 94 4b 09 	call	0x1296	; 0x1296 <__udivmodhi4>
    12d0:	07 fc       	sbrc	r0, 7
    12d2:	05 d0       	rcall	.+10     	; 0x12de <__divmodhi4_neg2>
    12d4:	3e f4       	brtc	.+14     	; 0x12e4 <__divmodhi4_exit>

000012d6 <__divmodhi4_neg1>:
    12d6:	90 95       	com	r25
    12d8:	81 95       	neg	r24
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__divmodhi4_neg2>:
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255

000012e4 <__divmodhi4_exit>:
    12e4:	08 95       	ret

000012e6 <__udivmodsi4>:
    12e6:	a1 e2       	ldi	r26, 0x21	; 33
    12e8:	1a 2e       	mov	r1, r26
    12ea:	aa 1b       	sub	r26, r26
    12ec:	bb 1b       	sub	r27, r27
    12ee:	fd 01       	movw	r30, r26
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <__udivmodsi4_ep>

000012f2 <__udivmodsi4_loop>:
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	ee 1f       	adc	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	a2 17       	cp	r26, r18
    12fc:	b3 07       	cpc	r27, r19
    12fe:	e4 07       	cpc	r30, r20
    1300:	f5 07       	cpc	r31, r21
    1302:	20 f0       	brcs	.+8      	; 0x130c <__udivmodsi4_ep>
    1304:	a2 1b       	sub	r26, r18
    1306:	b3 0b       	sbc	r27, r19
    1308:	e4 0b       	sbc	r30, r20
    130a:	f5 0b       	sbc	r31, r21

0000130c <__udivmodsi4_ep>:
    130c:	66 1f       	adc	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	1a 94       	dec	r1
    1316:	69 f7       	brne	.-38     	; 0x12f2 <__udivmodsi4_loop>
    1318:	60 95       	com	r22
    131a:	70 95       	com	r23
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	bd 01       	movw	r22, r26
    1326:	cf 01       	movw	r24, r30
    1328:	08 95       	ret

0000132a <__umulhisi3>:
    132a:	a2 9f       	mul	r26, r18
    132c:	b0 01       	movw	r22, r0
    132e:	b3 9f       	mul	r27, r19
    1330:	c0 01       	movw	r24, r0
    1332:	a3 9f       	mul	r26, r19
    1334:	70 0d       	add	r23, r0
    1336:	81 1d       	adc	r24, r1
    1338:	11 24       	eor	r1, r1
    133a:	91 1d       	adc	r25, r1
    133c:	b2 9f       	mul	r27, r18
    133e:	70 0d       	add	r23, r0
    1340:	81 1d       	adc	r24, r1
    1342:	11 24       	eor	r1, r1
    1344:	91 1d       	adc	r25, r1
    1346:	08 95       	ret

00001348 <_exit>:
    1348:	f8 94       	cli

0000134a <__stop_program>:
    134a:	ff cf       	rjmp	.-2      	; 0x134a <__stop_program>
